<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[geek-is-stupid]]></title>
  <link href="http://geek-is-stupid.github.io/atom.xml" rel="self"/>
  <link href="http://geek-is-stupid.github.io/"/>
  <updated>2017-04-14T10:08:56+07:00</updated>
  <id>http://geek-is-stupid.github.io/</id>
  <author>
    <name><![CDATA[levantAJ]]></name>
    <email><![CDATA[sirlevantai@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Record, Detect Faces, Overlay Video at Real-time Using Swift?]]></title>
    <link href="http://geek-is-stupid.github.io/blog/2017/04/13/how-to-record-detect-face-overlay-video-at-real-time-using-swift/"/>
    <updated>2017-04-13T15:30:16+07:00</updated>
    <id>http://geek-is-stupid.github.io/blog/2017/04/13/how-to-record-detect-face-overlay-video-at-real-time-using-swift</id>
    <content type="html"><![CDATA[<p>This post will show the way how to record, detect faces, overlay video at real-time using <code>AVFoundation</code> via Swift3:</p>

<h2>1. Create your recorder view:</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">final</span> <span class="k">class</span> <span class="nl">RecorderView</span><span class="p">:</span> <span class="bp">UIView</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//Your next steps will be implemented here :]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t forget import some needed libs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">import</span> <span class="n">AVFoundation</span>
</span><span class='line'><span class="k">import</span> <span class="n">ImageIO</span>
</span><span class='line'>
</span><span class='line'><span class="n">final</span> <span class="k">class</span> <span class="nl">RecorderView</span><span class="p">:</span> <span class="bp">UIView</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2. Create camera:</h2>

<p>Let create some global variables for your camera inside your recorder view:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">final</span> <span class="k">class</span> <span class="nl">RecorderView</span><span class="p">:</span> <span class="bp">UIView</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">fileprivate</span> <span class="n">lazy</span> <span class="k">var</span> <span class="n">cameraSession</span> <span class="o">=</span> <span class="bp">AVCaptureSession</span><span class="p">()</span>
</span><span class='line'>  <span class="n">fileprivate</span> <span class="n">lazy</span> <span class="k">var</span> <span class="n">videoDataOutput</span> <span class="o">=</span> <span class="bp">AVCaptureVideoDataOutput</span><span class="p">()</span>
</span><span class='line'>  <span class="n">fileprivate</span> <span class="n">lazy</span> <span class="k">var</span> <span class="n">audioDataOutput</span> <span class="o">=</span> <span class="bp">AVCaptureAudioDataOutput</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s setup your camera:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">final</span> <span class="k">class</span> <span class="nl">RecorderView</span><span class="p">:</span> <span class="bp">UIView</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">fileprivate</span> <span class="k">func</span> <span class="n">setupCamera</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//The size of output video will be 720x1280</span>
</span><span class='line'>      <span class="n">cameraSession</span><span class="p">.</span><span class="n">sessionPreset</span> <span class="o">=</span> <span class="n">AVCaptureSessionPreset1280x720</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//Setup your camera</span>
</span><span class='line'>      <span class="c1">//Detect which type of camera should be used via `isUsingFrontFacingCamera`</span>
</span><span class='line'>      <span class="k">let</span> <span class="nl">captureDevice</span><span class="p">:</span> <span class="bp">AVCaptureDevice</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">isUsingFrontFacingCamera</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">captureDevice</span> <span class="o">=</span> <span class="bp">AVCaptureDevice</span><span class="p">.</span><span class="n">devices</span><span class="p">(</span><span class="nl">withMediaType</span><span class="p">:</span> <span class="n">AVMediaTypeVideo</span><span class="p">)</span>
</span><span class='line'>                                         <span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">AVCaptureDevice</span> <span class="p">}</span>
</span><span class='line'>                                         <span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="nl">where</span><span class="p">:</span> <span class="p">{</span> <span class="err">$</span><span class="mf">0.</span><span class="n">position</span> <span class="o">==</span> <span class="p">.</span><span class="n">front</span> <span class="p">})</span> <span class="o">??</span> <span class="bp">AVCaptureDevice</span><span class="p">.</span><span class="n">defaultDevice</span><span class="p">(</span><span class="nl">withMediaType</span><span class="p">:</span> <span class="n">AVMediaTypeVideo</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">captureDevice</span> <span class="o">=</span> <span class="bp">AVCaptureDevice</span><span class="p">.</span><span class="n">defaultDevice</span><span class="p">(</span><span class="nl">withMediaType</span><span class="p">:</span> <span class="n">AVMediaTypeVideo</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//Setup your microphone </span>
</span><span class='line'>      <span class="k">let</span> <span class="n">audioDevice</span> <span class="o">=</span> <span class="bp">AVCaptureDevice</span><span class="p">.</span><span class="n">defaultDevice</span><span class="p">(</span><span class="nl">withMediaType</span><span class="p">:</span> <span class="n">AVMediaTypeAudio</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">cameraSession</span><span class="p">.</span><span class="n">beginConfiguration</span><span class="p">()</span>
</span><span class='line'>              
</span><span class='line'>          <span class="c1">// Add camera to your session</span>
</span><span class='line'>          <span class="k">let</span> <span class="n">deviceInput</span> <span class="o">=</span> <span class="n">try</span> <span class="bp">AVCaptureDeviceInput</span><span class="p">(</span><span class="nl">device</span><span class="p">:</span> <span class="n">captureDevice</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">cameraSession</span><span class="p">.</span><span class="n">canAddInput</span><span class="p">(</span><span class="n">deviceInput</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">cameraSession</span><span class="p">.</span><span class="n">addInput</span><span class="p">(</span><span class="n">deviceInput</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>          <span class="c1">// Add microphone to your session</span>
</span><span class='line'>          <span class="k">let</span> <span class="n">audioInput</span> <span class="o">=</span> <span class="n">try</span> <span class="bp">AVCaptureDeviceInput</span><span class="p">(</span><span class="nl">device</span><span class="p">:</span> <span class="n">audioDevice</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">cameraSession</span><span class="p">.</span><span class="n">canAddInput</span><span class="p">(</span><span class="n">audioInput</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">cameraSession</span><span class="p">.</span><span class="n">addInput</span><span class="p">(</span><span class="n">audioInput</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">//Now we should define your output data</span>
</span><span class='line'>          <span class="k">let</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">DispatchQueue</span><span class="p">(</span><span class="nl">label</span><span class="p">:</span> <span class="s">&quot;com.hilaoinc.hilao.queue.record-video.data-output&quot;</span><span class="p">)</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">//Define your video output</span>
</span><span class='line'>          <span class="n">videoDataOutput</span><span class="p">.</span><span class="n">videoSettings</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>              <span class="n">kCVPixelBufferPixelFormatTypeKey</span> <span class="kt">as</span> <span class="nl">String</span><span class="p">:</span> <span class="n">kCVPixelFormatType_32BGRA</span><span class="p">,</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>          <span class="n">videoDataOutput</span><span class="p">.</span><span class="n">alwaysDiscardsLateVideoFrames</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">cameraSession</span><span class="p">.</span><span class="n">canAddOutput</span><span class="p">(</span><span class="n">videoDataOutput</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">videoDataOutput</span><span class="p">.</span><span class="n">setSampleBufferDelegate</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="nl">queue</span><span class="p">:</span> <span class="n">queue</span><span class="p">)</span>
</span><span class='line'>              <span class="n">cameraSession</span><span class="p">.</span><span class="n">addOutput</span><span class="p">(</span><span class="n">videoDataOutput</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">//Define your audio output</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">cameraSession</span><span class="p">.</span><span class="n">canAddOutput</span><span class="p">(</span><span class="n">audioDataOutput</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">audioDataOutput</span><span class="p">.</span><span class="n">setSampleBufferDelegate</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="nl">queue</span><span class="p">:</span> <span class="n">queue</span><span class="p">)</span>
</span><span class='line'>              <span class="n">cameraSession</span><span class="p">.</span><span class="n">addOutput</span><span class="p">(</span><span class="n">audioDataOutput</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">cameraSession</span><span class="p">.</span><span class="n">commitConfiguration</span><span class="p">()</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">//Present the preview of video </span>
</span><span class='line'>          <span class="n">previewLayer</span> <span class="o">=</span> <span class="bp">AVCaptureVideoPreviewLayer</span><span class="p">(</span><span class="nl">session</span><span class="p">:</span> <span class="n">cameraSession</span><span class="p">)</span>
</span><span class='line'>          <span class="n">previewLayer</span><span class="p">.</span><span class="n">bounds</span> <span class="o">=</span> <span class="n">bounds</span>
</span><span class='line'>          <span class="n">previewLayer</span><span class="p">.</span><span class="n">videoGravity</span> <span class="o">=</span> <span class="n">AVLayerVideoGravityResizeAspectFill</span>
</span><span class='line'>          <span class="n">layer</span><span class="p">.</span><span class="n">addSublayer</span><span class="p">(</span><span class="n">previewLayer</span><span class="p">)</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">//Don&#39;t forget start running your session</span>
</span><span class='line'>          <span class="c1">//this doesn&#39;t mean start record!</span>
</span><span class='line'>          <span class="n">cameraSession</span><span class="p">.</span><span class="n">startRunning</span><span class="p">()</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">catch</span> <span class="k">let</span> <span class="n">error</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">debugPrint</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s implement <code>AVCaptureVideoDataOutputSampleBufferDelegate</code> and <code>AVCaptureAudioDataOutputSampleBufferDelegate</code> to handles your recorded video</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// MARK: - AVCaptureVideoDataOutputSampleBufferDelegate, AVCaptureVideoDataOutputSampleBufferDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="k">extension</span> <span class="nl">RecorderView</span><span class="p">:</span> <span class="bp">AVCaptureVideoDataOutputSampleBufferDelegate</span><span class="p">,</span>
</span><span class='line'>                      <span class="bp">AVCaptureVideoDataOutputSampleBufferDelegate</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//There is only one same method for both of these delegates</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">captureOutput</span><span class="p">(</span><span class="n">_</span> <span class="nl">captureOutput</span><span class="p">:</span> <span class="bp">AVCaptureOutput</span><span class="o">!</span><span class="p">,</span>
</span><span class='line'>                       <span class="n">didOutputSampleBuffer</span> <span class="nl">sampleBuffer</span><span class="p">:</span> <span class="n">CMSampleBuffer</span><span class="o">!</span><span class="p">,</span>
</span><span class='line'>                       <span class="n">from</span> <span class="nl">connection</span><span class="p">:</span> <span class="bp">AVCaptureConnection</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//The detect faces, overlay video will happen here, take care my man :]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3. Real-time detect faces:</h2>

<p>We&rsquo;ll using <code>CIDetector</code> to detect faces from a <code>CIImage</code>, let&rsquo;s create one global detector:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">final</span> <span class="k">class</span> <span class="nl">RecorderView</span><span class="p">:</span> <span class="bp">UIView</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">fileprivate</span> <span class="n">lazy</span> <span class="k">var</span> <span class="n">faceDetector</span> <span class="o">=</span> <span class="bp">CIDetector</span><span class="p">(</span><span class="nl">ofType</span><span class="p">:</span> <span class="n">CIDetectorTypeFace</span><span class="p">,</span>
</span><span class='line'>                                                 <span class="nl">context</span><span class="p">:</span> <span class="nb">nil</span><span class="p">,</span>
</span><span class='line'>                                                 <span class="nl">options</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                                                      <span class="nl">CIDetectorAccuracy</span><span class="p">:</span> <span class="n">CIDetectorAccuracyHigh</span><span class="p">,</span>
</span><span class='line'>                                                      <span class="nl">CIDetectorTracking</span><span class="p">:</span> <span class="nb">true</span>
</span><span class='line'>                                                 <span class="p">])</span><span class="o">!</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now back to this method <code>func captureOutput(_:didOutputSampleBuffer:from:)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">captureOutput</span><span class="p">(</span><span class="n">_</span> <span class="nl">captureOutput</span><span class="p">:</span> <span class="bp">AVCaptureOutput</span><span class="o">!</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">didOutputSampleBuffer</span> <span class="nl">sampleBuffer</span><span class="p">:</span> <span class="n">CMSampleBuffer</span><span class="o">!</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">from</span> <span class="nl">connection</span><span class="p">:</span> <span class="bp">AVCaptureConnection</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//Overlay means processing on the images, not audio</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">captureOutput</span> <span class="o">==</span> <span class="n">videoDataOutput</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//Important: Correct your video orientation from your device orientation</span>
</span><span class='line'>      <span class="k">switch</span> <span class="bp">UIDevice</span><span class="p">.</span><span class="n">current</span><span class="p">.</span><span class="n">orientation</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="p">.</span><span class="nl">landscapeRight</span><span class="p">:</span>
</span><span class='line'>              <span class="n">connection</span><span class="p">.</span><span class="n">videoOrientation</span> <span class="o">=</span> <span class="p">.</span><span class="n">landscapeLeft</span>
</span><span class='line'>          <span class="k">case</span> <span class="p">.</span><span class="nl">landscapeLeft</span><span class="p">:</span>
</span><span class='line'>              <span class="n">connection</span><span class="p">.</span><span class="n">videoOrientation</span> <span class="o">=</span> <span class="p">.</span><span class="n">landscapeRight</span>
</span><span class='line'>          <span class="k">case</span> <span class="p">.</span><span class="nl">portrait</span><span class="p">:</span>
</span><span class='line'>              <span class="n">connection</span><span class="p">.</span><span class="n">videoOrientation</span> <span class="o">=</span> <span class="p">.</span><span class="n">portrait</span>
</span><span class='line'>          <span class="k">case</span> <span class="p">.</span><span class="nl">portraitUpsideDown</span><span class="p">:</span>
</span><span class='line'>              <span class="n">connection</span><span class="p">.</span><span class="n">videoOrientation</span> <span class="o">=</span> <span class="p">.</span><span class="n">portraitUpsideDown</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span>
</span><span class='line'>              <span class="n">connection</span><span class="p">.</span><span class="n">videoOrientation</span> <span class="o">=</span> <span class="p">.</span><span class="n">portrait</span> <span class="c1">//Make `.portrait` as default (should check will `.faceUp` and `.faceDown`)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//Convert current frame to `CIImage`</span>
</span><span class='line'>      <span class="k">let</span> <span class="n">pixelBuffer</span> <span class="o">=</span> <span class="n">CMSampleBufferGetImageBuffer</span><span class="p">(</span><span class="n">sampleBuffer</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>      <span class="k">let</span> <span class="n">attachments</span> <span class="o">=</span> <span class="n">CMCopyDictionaryOfAttachments</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span>
</span><span class='line'>                                                      <span class="n">pixelBuffer</span><span class="p">,</span>
</span><span class='line'>                                                      <span class="n">CMAttachmentMode</span><span class="p">(</span><span class="n">kCMAttachmentMode_ShouldPropagate</span><span class="p">))</span> <span class="kt">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String</span><span class="p">:</span> <span class="n">Any</span><span class="p">]</span>
</span><span class='line'>      <span class="k">let</span> <span class="n">ciImage</span> <span class="o">=</span> <span class="bp">CIImage</span><span class="p">(</span><span class="nl">cvImageBuffer</span><span class="p">:</span> <span class="n">pixelBuffer</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="n">attachments</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//Detects faces base on your `ciImage`</span>
</span><span class='line'>      <span class="k">let</span> <span class="n">features</span> <span class="o">=</span> <span class="n">faceDetector</span><span class="p">.</span><span class="n">features</span><span class="p">(</span><span class="k">in</span><span class="o">:</span> <span class="n">ciImage</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="nl">CIDetectorSmile</span><span class="p">:</span> <span class="nb">true</span><span class="p">,</span>
</span><span class='line'>                <span class="nl">CIDetectorEyeBlink</span><span class="p">:</span> <span class="nb">true</span><span class="p">,</span>
</span><span class='line'>                <span class="p">]).</span><span class="n">flatMap</span> <span class="p">({</span> <span class="err">$</span><span class="mi">0</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">CIFaceFeature</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//Retreive frame of your buffer</span>
</span><span class='line'>      <span class="k">let</span> <span class="n">desc</span> <span class="o">=</span> <span class="n">CMSampleBufferGetFormatDescription</span><span class="p">(</span><span class="n">sampleBuffer</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>      <span class="k">let</span> <span class="n">bufferFrame</span> <span class="o">=</span> <span class="n">CMVideoFormatDescriptionGetCleanAperture</span><span class="p">(</span><span class="n">desc</span><span class="p">,</span> <span class="nb">false</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//Draw faces masks</span>
</span><span class='line'>      <span class="n">DispatchQueue</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">async</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="nb">self</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>          <span class="nb">self</span><span class="o">?</span><span class="p">.</span><span class="n">drawFaceMasksFor</span><span class="p">(</span><span class="nl">features</span><span class="p">:</span> <span class="n">features</span><span class="p">,</span> <span class="nl">bufferFrame</span><span class="p">:</span> <span class="n">bufferFrame</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Show your faces on the screen</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="n">RecorderView</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">fileprivate</span> <span class="k">func</span> <span class="n">drawFaceMasksFor</span><span class="p">(</span><span class="nl">features</span><span class="p">:</span> <span class="p">[</span><span class="bp">CIFaceFeature</span><span class="p">],</span> <span class="nl">bufferFrame</span><span class="p">:</span> <span class="bp">CGRect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">CATransaction</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">CATransaction</span><span class="p">.</span><span class="n">setValue</span><span class="p">(</span><span class="n">kCFBooleanTrue</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="n">kCATransactionDisableActions</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Hide all current masks</span>
</span><span class='line'>        <span class="n">layer</span><span class="p">.</span><span class="n">sublayers</span><span class="o">?</span><span class="p">.</span><span class="n">filter</span><span class="p">({</span> <span class="err">$</span><span class="mf">0.</span><span class="n">name</span> <span class="o">==</span> <span class="s">&quot;MaskFace&quot;</span> <span class="p">}).</span><span class="n">forEach</span> <span class="p">{</span> <span class="err">$</span><span class="mf">0.</span><span class="n">isHidden</span> <span class="o">=</span> <span class="nb">true</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Do nothing if no face is dected</span>
</span><span class='line'>        <span class="n">guard</span> <span class="o">!</span><span class="n">features</span><span class="p">.</span><span class="n">isEmpty</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="bp">CATransaction</span><span class="p">.</span><span class="n">commit</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//The problem is we detect the faces on video image size</span>
</span><span class='line'>        <span class="c1">//but when we show on the screen which might smaller or bigger than your video size</span>
</span><span class='line'>        <span class="c1">//so we need to re-calculate the faces bounds to fit to your screen</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">xScale</span> <span class="o">=</span> <span class="n">frame</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="n">bufferFrame</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">yScale</span> <span class="o">=</span> <span class="n">frame</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="n">bufferFrame</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">transform</span> <span class="o">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="nl">rotationAngle</span><span class="p">:</span> <span class="p">.</span><span class="n">pi</span><span class="p">).</span><span class="n">translatedBy</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="o">-</span><span class="n">bufferFrame</span><span class="p">.</span><span class="n">width</span><span class="p">,</span>
</span><span class='line'>                                                                         <span class="nl">y</span><span class="p">:</span> <span class="o">-</span><span class="n">bufferFrame</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="n">feature</span> <span class="k">in</span> <span class="n">features</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">var</span> <span class="n">faceRect</span> <span class="o">=</span> <span class="n">feature</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">applying</span><span class="p">(</span><span class="n">transform</span><span class="p">)</span>
</span><span class='line'>          <span class="n">faceRect</span> <span class="o">=</span> <span class="bp">CGRect</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="n">faceRect</span><span class="p">.</span><span class="n">minX</span> <span class="o">*</span> <span class="n">xScale</span><span class="p">,</span>
</span><span class='line'>                            <span class="nl">y</span><span class="p">:</span> <span class="n">faceRect</span><span class="p">.</span><span class="n">minY</span> <span class="o">*</span> <span class="n">yScale</span><span class="p">,</span>
</span><span class='line'>                            <span class="nl">width</span><span class="p">:</span> <span class="n">faceRect</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="n">xScale</span><span class="p">,</span>
</span><span class='line'>                            <span class="nl">height</span><span class="p">:</span> <span class="n">faceRect</span><span class="p">.</span><span class="n">height</span> <span class="o">*</span> <span class="n">yScale</span><span class="p">)</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">//Reuse the face&#39;s layer</span>
</span><span class='line'>          <span class="k">let</span> <span class="n">faceLayer</span> <span class="o">=</span> <span class="n">layer</span><span class="p">.</span><span class="n">sublayers</span><span class="o">?</span>
</span><span class='line'>                               <span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="err">$</span><span class="mf">0.</span><span class="n">name</span> <span class="o">==</span> <span class="s">&quot;MaskFace&quot;</span> <span class="o">&amp;&amp;</span> <span class="err">$</span><span class="mf">0.</span><span class="n">isHidden</span> <span class="o">==</span> <span class="nb">true</span> <span class="p">}</span>
</span><span class='line'>                               <span class="p">.</span><span class="n">first</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">faceLayer</span> <span class="o">==</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">//Add an image as a mask to your project with name: `face-imaged   </span>
</span><span class='line'>              <span class="k">let</span> <span class="n">faceImage</span> <span class="o">=</span> <span class="bp">UIImage</span><span class="p">(</span><span class="nl">named</span><span class="p">:</span> <span class="s">&quot;face-imaged&quot;</span><span class="p">)</span>
</span><span class='line'>              <span class="n">faceLayer</span> <span class="o">=</span> <span class="bp">CALayer</span><span class="p">()</span>
</span><span class='line'>              <span class="n">faceLayer</span><span class="p">.</span><span class="n">contents</span> <span class="o">=</span> <span class="n">faceImage</span><span class="p">.</span><span class="n">ciImage</span>
</span><span class='line'>              <span class="n">faceLayer</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">faceRect</span>
</span><span class='line'>              <span class="n">faceLayer</span><span class="p">.</span><span class="n">masksToBounds</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>              <span class="n">faceLayer</span><span class="p">.</span><span class="n">contentsGravity</span> <span class="o">=</span> <span class="n">kCAGravityResizeAspectFill</span>
</span><span class='line'>              <span class="n">layer</span><span class="p">.</span><span class="n">addSublayer</span><span class="p">(</span><span class="n">faceLayer</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">faceLayer</span><span class="o">?</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">faceRect</span>
</span><span class='line'>              <span class="n">faceLayer</span><span class="o">?</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">faceRect</span><span class="p">.</span><span class="n">origin</span>
</span><span class='line'>              <span class="n">faceLayer</span><span class="o">?</span><span class="p">.</span><span class="n">isHidden</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">//You can add some masks for your left eye, right eye, mouth </span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="bp">CATransaction</span><span class="p">.</span><span class="n">commit</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now please run your project and see the result, don&rsquo;t forget add your <code>RecorderView</code> into your View Controller</p>

<h2>4. Record video</h2>

<p>At those first steps we already detect real-time faces, now we will record a video.</p>

<p>To write down some buffers as a video file we need to touch on <code>AVAssetWriter</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">fileprivate</span><span class="p">(</span><span class="kr">set</span><span class="p">)</span> <span class="n">lazy</span> <span class="k">var</span> <span class="n">isRecording</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="n">fileprivate</span> <span class="k">var</span> <span class="nl">videoWriter</span><span class="p">:</span> <span class="bp">AVAssetWriter</span><span class="o">!</span>
</span><span class='line'><span class="n">fileprivate</span> <span class="k">var</span> <span class="nl">videoWriterInput</span><span class="p">:</span> <span class="bp">AVAssetWriterInput</span><span class="o">!</span>
</span><span class='line'><span class="n">fileprivate</span> <span class="k">var</span> <span class="nl">audioWriterInput</span><span class="p">:</span> <span class="bp">AVAssetWriterInput</span><span class="o">!</span>
</span><span class='line'><span class="n">fileprivate</span> <span class="k">var</span> <span class="nl">sessionAtSourceTime</span><span class="p">:</span> <span class="n">CMTime</span><span class="o">?</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Setup asset writer: Whenever you want to record new video, you have to re-setup the writer again!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">fileprivate</span> <span class="k">func</span> <span class="nf">setupWriter</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="n">AssetUtils</span><span class="p">.</span><span class="n">outputAssetURL</span><span class="p">(</span><span class="nl">mediaType</span><span class="p">:</span> <span class="p">.</span><span class="n">video</span><span class="p">)</span>
</span><span class='line'>      <span class="n">videoWriter</span> <span class="o">=</span> <span class="n">try</span> <span class="bp">AVAssetWriter</span><span class="p">(</span><span class="nl">url</span><span class="p">:</span> <span class="n">url</span><span class="p">,</span> <span class="nl">fileType</span><span class="p">:</span> <span class="n">AVFileTypeMPEG4</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//Add video input</span>
</span><span class='line'>      <span class="n">videoWriterInput</span> <span class="o">=</span> <span class="bp">AVAssetWriterInput</span><span class="p">(</span><span class="nl">mediaType</span><span class="p">:</span> <span class="n">AVMediaTypeVideo</span><span class="p">,</span> <span class="nl">outputSettings</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>              <span class="nl">AVVideoCodecKey</span><span class="p">:</span> <span class="n">AVVideoCodecH264</span><span class="p">,</span>
</span><span class='line'>              <span class="nl">AVVideoWidthKey</span><span class="p">:</span> <span class="mi">720</span><span class="p">,</span>
</span><span class='line'>              <span class="nl">AVVideoHeightKey</span><span class="p">:</span> <span class="mi">1280</span><span class="p">,</span>
</span><span class='line'>              <span class="nl">AVVideoCompressionPropertiesKey</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                  <span class="nl">AVVideoAverageBitRateKey</span><span class="p">:</span> <span class="mi">2300000</span><span class="p">,</span>
</span><span class='line'>              <span class="p">],</span>
</span><span class='line'>          <span class="p">])</span>
</span><span class='line'>      <span class="n">videoWriterInput</span><span class="p">.</span><span class="n">expectsMediaDataInRealTime</span> <span class="o">=</span> <span class="nb">true</span> <span class="c1">//Make sure we are exporting data at realtime</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">videoWriter</span><span class="p">.</span><span class="n">canAdd</span><span class="p">(</span><span class="n">videoWriterInput</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">videoWriter</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">videoWriterInput</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//Add audio input </span>
</span><span class='line'>      <span class="n">audioWriterInput</span> <span class="o">=</span> <span class="bp">AVAssetWriterInput</span><span class="p">(</span><span class="nl">mediaType</span><span class="p">:</span> <span class="n">AVMediaTypeAudio</span><span class="p">,</span> <span class="nl">outputSettings</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>              <span class="nl">AVFormatIDKey</span><span class="p">:</span> <span class="n">kAudioFormatMPEG4AAC</span><span class="p">,</span>
</span><span class='line'>              <span class="nl">AVNumberOfChannelsKey</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>              <span class="nl">AVSampleRateKey</span><span class="p">:</span> <span class="mi">44100</span><span class="p">,</span>
</span><span class='line'>              <span class="nl">AVEncoderBitRateKey</span><span class="p">:</span> <span class="mi">64000</span><span class="p">,</span>
</span><span class='line'>          <span class="p">])</span>
</span><span class='line'>      <span class="n">audioWriterInput</span><span class="p">.</span><span class="n">expectsMediaDataInRealTime</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">videoWriter</span><span class="p">.</span><span class="n">canAdd</span><span class="p">(</span><span class="n">audioWriterInput</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">videoWriter</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">audioWriterInput</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">videoWriter</span><span class="p">.</span><span class="n">startWriting</span><span class="p">()</span> <span class="c1">//Means ready to write down the file</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">catch</span> <span class="k">let</span> <span class="n">error</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">debugPrint</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check the writability:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="n">RecorderView</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">fileprivate</span> <span class="k">func</span> <span class="n">canWrite</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">isRecording</span>
</span><span class='line'>          <span class="o">&amp;&amp;</span> <span class="n">videoWriter</span> <span class="o">!=</span> <span class="nb">nil</span>
</span><span class='line'>          <span class="o">&amp;&amp;</span> <span class="n">videoWriter</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="p">.</span><span class="n">writing</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Write down buffer to the writer, comes back to method: <code>func captureOutput(_:didOutputSampleBuffer:from:)</code> and do some updates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">captureOutput</span><span class="p">(</span><span class="n">_</span> <span class="nl">captureOutput</span><span class="p">:</span> <span class="bp">AVCaptureOutput</span><span class="o">!</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">didOutputSampleBuffer</span> <span class="nl">sampleBuffer</span><span class="p">:</span> <span class="n">CMSampleBuffer</span><span class="o">!</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">from</span> <span class="nl">connection</span><span class="p">:</span> <span class="bp">AVCaptureConnection</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">guard</span> <span class="n">captureOutput</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">,</span>
</span><span class='line'>            <span class="n">sampleBuffer</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">,</span>
</span><span class='line'>            <span class="n">connection</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">,</span>
</span><span class='line'>            <span class="n">CMSampleBufferDataIsReady</span><span class="p">(</span><span class="n">sampleBuffer</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">let</span> <span class="n">writable</span> <span class="o">=</span> <span class="n">canWrite</span><span class="p">()</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="n">writable</span><span class="p">,</span>
</span><span class='line'>       <span class="n">sessionAtSourceTime</span> <span class="o">==</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//Start writing</span>
</span><span class='line'>      <span class="n">sessionAtSourceTime</span> <span class="o">=</span> <span class="n">CMSampleBufferGetPresentationTimeStamp</span><span class="p">(</span><span class="n">sampleBuffer</span><span class="p">)</span>
</span><span class='line'>      <span class="n">videoWriter</span><span class="p">.</span><span class="n">startSession</span><span class="p">(</span><span class="nl">atSourceTime</span><span class="p">:</span> <span class="n">sessionAtSourceTime</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">captureOutput</span> <span class="o">==</span> <span class="n">videoDataOutput</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span> <span class="c1">//Your old code when make the overlay here</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="n">videoWriterInput</span><span class="p">.</span><span class="n">isReadyForMoreMediaData</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">//Write video buffer</span>
</span><span class='line'>          <span class="n">videoWriterInput</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">sampleBuffer</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">writable</span><span class="p">,</span>
</span><span class='line'>      <span class="n">captureOutput</span> <span class="o">==</span> <span class="n">audioDataOutput</span><span class="p">,</span>
</span><span class='line'>      <span class="n">audioWriterInput</span><span class="p">.</span><span class="n">isReadyForMoreMediaData</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//Write audio buffer</span>
</span><span class='line'>      <span class="n">audioWriterInput</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">sampleBuffer</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To start recording:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="n">RecorderView</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">start</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">guard</span> <span class="o">!</span><span class="n">isRecording</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">isRecording</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>      <span class="n">sessionAtSourceTime</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'>      <span class="n">startWriting</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Stop recording:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="n">RecorderView</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">stop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">guard</span> <span class="n">isRecording</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">isRecording</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>      <span class="n">videoWriter</span><span class="p">.</span><span class="n">finishWriting</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="nb">self</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>          <span class="nb">self</span><span class="o">?</span><span class="p">.</span><span class="n">sessionAtSourceTime</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'>          <span class="n">guard</span> <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="nb">self</span><span class="o">?</span><span class="p">.</span><span class="n">videoWriter</span><span class="p">.</span><span class="n">outputURL</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>          <span class="k">let</span> <span class="n">asset</span> <span class="o">=</span> <span class="bp">AVURLAsset</span><span class="p">(</span><span class="nl">url</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>          <span class="c1">//Do whatever you want with your asset here</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can able to pause and resume record like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="n">RecorderView</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">pause</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">isRecording</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">func</span> <span class="n">resume</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">isRecording</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t be mad if the recorded video without the mask, I will show you at next step!</p>

<h2>5. Add mask to recorded video</h2>

<p>To apply the mask into the recorde video we need using <code>AVAssetWriterInputPixelBufferAdaptor</code> to do it!!! :]</p>

<p>Declare some more global variables</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">fileprivate</span> <span class="k">var</span> <span class="nl">videoWriterInputPixelBufferAdaptor</span><span class="p">:</span> <span class="bp">AVAssetWriterInputPixelBufferAdaptor</span><span class="o">!</span>
</span><span class='line'><span class="n">fileprivate</span> <span class="n">lazy</span> <span class="k">var</span> <span class="n">sDeviceRgbColorSpace</span> <span class="o">=</span> <span class="n">CGColorSpaceCreateDeviceRGB</span><span class="p">()</span>
</span><span class='line'><span class="n">fileprivate</span> <span class="n">lazy</span> <span class="k">var</span> <span class="n">bitmapInfo</span> <span class="o">=</span> <span class="n">CGBitmapInfo</span><span class="p">.</span><span class="n">byteOrder32Little</span>
</span><span class='line'>                                            <span class="p">.</span><span class="k">union</span><span class="p">(</span><span class="n">CGBitmapInfo</span><span class="p">(</span><span class="nl">rawValue</span><span class="p">:</span> <span class="n">CGImageAlphaInfo</span><span class="p">.</span><span class="n">noneSkipFirst</span><span class="p">.</span><span class="n">rawValue</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Update func <code>func setupWriter</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">fileprivate</span> <span class="k">func</span> <span class="nf">setupWriter</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">videoWriterInputPixelBufferAdaptor</span> <span class="o">=</span> <span class="bp">AVAssetWriterInputPixelBufferAdaptor</span><span class="p">(</span><span class="nl">assetWriterInput</span><span class="p">:</span> <span class="n">videoWriterInput</span><span class="p">,</span> <span class="nl">sourcePixelBufferAttributes</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>              <span class="n">kCVPixelBufferPixelFormatTypeKey</span> <span class="kt">as</span> <span class="nl">String</span><span class="p">:</span> <span class="n">kCVPixelFormatType_32BGRA</span><span class="p">,</span>
</span><span class='line'>              <span class="n">kCVPixelBufferWidthKey</span> <span class="kt">as</span> <span class="nl">String</span><span class="p">:</span> <span class="n">Constant</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="n">DefaultAssetSize</span><span class="p">.</span><span class="n">width</span><span class="p">,</span>
</span><span class='line'>              <span class="n">kCVPixelBufferHeightKey</span> <span class="kt">as</span> <span class="nl">String</span><span class="p">:</span> <span class="n">Constant</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="n">DefaultAssetSize</span><span class="p">.</span><span class="n">height</span><span class="p">,</span>
</span><span class='line'>              <span class="n">kCVPixelFormatOpenGLESCompatibility</span> <span class="kt">as</span> <span class="nl">String</span><span class="p">:</span> <span class="nb">true</span><span class="p">,</span>
</span><span class='line'>            <span class="p">])</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">videoWriter</span><span class="p">.</span><span class="n">startWriting</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">catch</span> <span class="k">let</span> <span class="n">error</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">debugPrint</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again back to edit method: <code>func captureOutput(_:didOutputSampleBuffer:from:)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">captureOutput</span><span class="p">(</span><span class="n">_</span> <span class="nl">captureOutput</span><span class="p">:</span> <span class="bp">AVCaptureOutput</span><span class="o">!</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">didOutputSampleBuffer</span> <span class="nl">sampleBuffer</span><span class="p">:</span> <span class="n">CMSampleBuffer</span><span class="o">!</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">from</span> <span class="nl">connection</span><span class="p">:</span> <span class="bp">AVCaptureConnection</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">captureOutput</span> <span class="o">==</span> <span class="n">videoDataOutput</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">//We dont write directly to `videoWriterInput`, will write to `videoWriterInputPixelBufferAdaptor</span>
</span><span class='line'>      <span class="c1">//if videoWriterInput.isReadyForMoreMediaData { </span>
</span><span class='line'>      <span class="c1">// //Write video buffer</span>
</span><span class='line'>      <span class="c1">// videoWriterInput.append(sampleBuffer)</span>
</span><span class='line'>      <span class="c1">//}</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">writable</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">autoreleasepool</span> <span class="p">{</span> <span class="c1">//Make sure `CVPixelBuffer` will release after used</span>
</span><span class='line'>          <span class="c1">//Lock `pixelBuffer` before working on it</span>
</span><span class='line'>          <span class="n">CVPixelBufferLockBaseAddress</span><span class="p">(</span><span class="n">pixelBuffer</span><span class="p">,</span> <span class="n">CVPixelBufferLockFlags</span><span class="p">(</span><span class="nl">rawValue</span><span class="p">:</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">//Deep copy buffer pixel to avoid memory leak</span>
</span><span class='line'>          <span class="k">var</span> <span class="nl">renderedOutputPixelBuffer</span><span class="p">:</span> <span class="n">CVPixelBuffer</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'>          <span class="k">let</span> <span class="n">options</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>              <span class="n">kCVPixelBufferCGImageCompatibilityKey</span> <span class="kt">as</span> <span class="nl">String</span><span class="p">:</span> <span class="nb">true</span><span class="p">,</span>
</span><span class='line'>              <span class="n">kCVPixelBufferCGBitmapContextCompatibilityKey</span> <span class="kt">as</span> <span class="nl">String</span><span class="p">:</span> <span class="nb">true</span><span class="p">,</span>
</span><span class='line'>          <span class="p">]</span> <span class="kt">as</span> <span class="n">CFDictionary</span>
</span><span class='line'>          <span class="k">let</span> <span class="n">status</span> <span class="o">=</span> <span class="n">CVPixelBufferCreate</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span>
</span><span class='line'>                                           <span class="n">CVPixelBufferGetWidth</span><span class="p">(</span><span class="n">pixelBuffer</span><span class="p">),</span>
</span><span class='line'>                                           <span class="n">CVPixelBufferGetHeight</span><span class="p">(</span><span class="n">pixelBuffer</span><span class="p">),</span>
</span><span class='line'>                                           <span class="n">kCVPixelFormatType_32BGRA</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span>
</span><span class='line'>                                           <span class="o">&amp;</span><span class="n">renderedOutputPixelBuffer</span><span class="p">)</span>
</span><span class='line'>          <span class="n">guard</span> <span class="n">status</span> <span class="o">==</span> <span class="n">kCVReturnSuccess</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">CVPixelBufferLockBaseAddress</span><span class="p">(</span><span class="n">renderedOutputPixelBuffer</span><span class="o">!</span><span class="p">,</span>
</span><span class='line'>                                       <span class="n">CVPixelBufferLockFlags</span><span class="p">(</span><span class="nl">rawValue</span><span class="p">:</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">let</span> <span class="n">renderedOutputPixelBufferBaseAddress</span> <span class="o">=</span> <span class="n">CVPixelBufferGetBaseAddress</span><span class="p">(</span><span class="n">renderedOutputPixelBuffer</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">memcpy</span><span class="p">(</span><span class="n">renderedOutputPixelBufferBaseAddress</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">CVPixelBufferGetBaseAddress</span><span class="p">(</span><span class="n">pixelBuffer</span><span class="p">),</span>
</span><span class='line'>                 <span class="n">CVPixelBufferGetHeight</span><span class="p">(</span><span class="n">pixelBuffer</span><span class="p">)</span> <span class="o">*</span> <span class="n">CVPixelBufferGetBytesPerRow</span><span class="p">(</span><span class="n">pixelBuffer</span><span class="p">))</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">//Lock the copy of pixel buffer when working on ti</span>
</span><span class='line'>          <span class="n">CVPixelBufferLockBaseAddress</span><span class="p">(</span><span class="n">renderedOutputPixelBuffer</span><span class="o">!</span><span class="p">,</span> <span class="n">CVPixelBufferLockFlags</span><span class="p">(</span><span class="nl">rawValue</span><span class="p">:</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">!</span><span class="n">features</span><span class="p">.</span><span class="n">isEmpty</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">//Create context base on copied buffer</span>
</span><span class='line'>              <span class="k">let</span> <span class="n">context</span> <span class="o">=</span> <span class="bp">CGContext</span><span class="p">(</span><span class="nl">data</span><span class="p">:</span> <span class="n">renderedOutputPixelBufferBaseAddress</span><span class="p">,</span>
</span><span class='line'>                                      <span class="nl">width</span><span class="p">:</span> <span class="n">CVPixelBufferGetWidth</span><span class="p">(</span><span class="n">renderedOutputPixelBuffer</span><span class="o">!</span><span class="p">),</span>
</span><span class='line'>                                      <span class="nl">height</span><span class="p">:</span> <span class="n">CVPixelBufferGetHeight</span><span class="p">(</span><span class="n">renderedOutputPixelBuffer</span><span class="o">!</span><span class="p">),</span>
</span><span class='line'>                                      <span class="nl">bitsPerComponent</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
</span><span class='line'>                                      <span class="nl">bytesPerRow</span><span class="p">:</span> <span class="n">CVPixelBufferGetBytesPerRow</span><span class="p">(</span><span class="n">renderedOutputPixelBuffer</span><span class="o">!</span><span class="p">),</span>
</span><span class='line'>                                      <span class="nl">space</span><span class="p">:</span> <span class="n">sDeviceRgbColorSpace</span><span class="p">,</span>
</span><span class='line'>                                      <span class="nl">bitmapInfo</span><span class="p">:</span> <span class="n">bitmapInfo</span><span class="p">.</span><span class="n">rawValue</span><span class="p">)</span>
</span><span class='line'>              
</span><span class='line'>              <span class="k">for</span> <span class="n">feature</span> <span class="k">in</span> <span class="n">features</span> <span class="p">{</span>
</span><span class='line'>                  <span class="c1">//Draw mask image</span>
</span><span class='line'>                  <span class="k">let</span> <span class="n">faceImage</span> <span class="o">=</span> <span class="bp">UIImage</span><span class="p">(</span><span class="s">&quot;face-image&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>                  <span class="n">context</span><span class="o">?</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">faceImage</span><span class="p">.</span><span class="n">cgImage</span><span class="o">!</span><span class="p">,</span> <span class="k">in</span><span class="o">:</span> <span class="n">feature</span><span class="p">.</span><span class="n">bounds</span><span class="p">)</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>              
</span><span class='line'>          <span class="c1">//Make sure adaptor and writer able to write</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">videoWriterInputPixelBufferAdaptor</span><span class="p">.</span><span class="n">assetWriterInput</span><span class="p">.</span><span class="n">isReadyForMoreMediaData</span><span class="p">,</span>
</span><span class='line'>              <span class="n">canWrite</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">//Write down to adator instead of `videoWriterInput`</span>
</span><span class='line'>              <span class="n">videoWriterInputPixelBufferAdaptor</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">renderedOutputPixelBuffer</span><span class="o">!</span><span class="p">,</span> <span class="nl">withPresentationTime</span><span class="p">:</span> <span class="n">timestamp</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">//Unlock buffers after processed on them </span>
</span><span class='line'>          <span class="n">CVPixelBufferUnlockBaseAddress</span><span class="p">(</span><span class="n">renderedOutputPixelBuffer</span><span class="o">!</span><span class="p">,</span>
</span><span class='line'>                                         <span class="n">CVPixelBufferLockFlags</span><span class="p">(</span><span class="nl">rawValue</span><span class="p">:</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>          <span class="n">CVPixelBufferUnlockBaseAddress</span><span class="p">(</span><span class="n">pixelBuffer</span><span class="p">,</span>
</span><span class='line'>                                         <span class="n">CVPixelBufferLockFlags</span><span class="p">(</span><span class="nl">rawValue</span><span class="p">:</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">writable</span><span class="p">,</span>
</span><span class='line'>      <span class="n">captureOutput</span> <span class="o">==</span> <span class="n">audioDataOutput</span><span class="p">,</span>
</span><span class='line'>      <span class="n">audioWriterInput</span><span class="p">.</span><span class="n">isReadyForMoreMediaData</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//Write audio buffer</span>
</span><span class='line'>      <span class="n">audioWriterInput</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">sampleBuffer</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Localize String From CocoaPods?]]></title>
    <link href="http://geek-is-stupid.github.io/blog/2017/04/04/how-to-localize-string-from-cocoapods/"/>
    <updated>2017-04-04T13:28:07+07:00</updated>
    <id>http://geek-is-stupid.github.io/blog/2017/04/04/how-to-localize-string-from-cocoapods</id>
    <content type="html"><![CDATA[<p>Last time I already introduced to how to localized in a simple project:</p>

<p><a href="http://geek-is-stupid.github.io/blog/2015/10/23/how-to-manage-all-localized-string-in-your-project/">http://geek-is-stupid.github.io/blog/2015/10/23/how-to-manage-all-localized-string-in-your-project/</a></p>

<p>Now I will show you how to localize from your CocoaPods dependences!</p>

<p>The simple way how you get the localized string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">string</span> <span class="o">=</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">&quot;Geek is stupid&quot;</span><span class="p">,</span> <span class="nl">comment</span><span class="p">:</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This statement will using main bundle to load all <strong><code>*.lproj</code></strong> files, but if you load from you CocoaPods it is not main bundle anymore! 😱</p>

<p>Cool, so if I have a library with the name is: <strong><code>YourCocoaPodsDependenceName</code></strong>, so we might to do 3 things:</p>

<h5>1. Add a global localized string method:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">static</span> <span class="k">func</span> <span class="n">localizedStringForKey</span><span class="p">(</span><span class="n">_</span> <span class="nl">key</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">comment</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">bundleClass</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">(</span><span class="k">for</span><span class="o">:</span> <span class="n">YourCocoaPodsDependenceName</span><span class="p">.</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">bundlePath</span> <span class="o">=</span> <span class="n">bundleClass</span><span class="p">.</span><span class="n">path</span><span class="p">(</span><span class="nl">forResource</span><span class="p">:</span> <span class="s">&quot;YourCocoaPodsDependenceName&quot;</span><span class="p">,</span> <span class="nl">ofType</span><span class="p">:</span> <span class="s">&quot;bundle&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">bundle</span> <span class="o">=</span> <span class="n">Bundle</span><span class="p">(</span><span class="nl">path</span><span class="p">:</span> <span class="n">bundlePath</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">string</span> <span class="o">=</span> <span class="n">bundle</span><span class="p">.</span><span class="n">localizedString</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">,</span> <span class="nl">value</span><span class="p">:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">table</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">string</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>2. Using <strong><code>localizedStringForKey(_: comment:)</code></strong> instead of <strong><code>NSLocalizedString</code></strong>:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">string</span> <span class="o">=</span> <span class="n">localizedStringForKey</span><span class="p">(</span><span class="s">&quot;Geek is stupid&quot;</span><span class="p">,</span> <span class="nl">comment</span><span class="p">:</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h5>3. Hold on, we might to update the <strong><code>*.podspec</code></strong> to tell CocoaPods that we are adding a bundle:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">s</span><span class="p">.</span><span class="n">resource_bundle</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&quot;YourCocoaPodsDependenceName&quot;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s">&quot;YourCocoaPodsDependenceName/**/*.lproj&quot;</span><span class="p">]</span> <span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Time to 🚀🚀🚀!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Center Text Vertically in a UITextView?]]></title>
    <link href="http://geek-is-stupid.github.io/blog/2017/03/14/how-to-center-text-vertically-in-a-uitextview/"/>
    <updated>2017-03-14T11:31:45+07:00</updated>
    <id>http://geek-is-stupid.github.io/blog/2017/03/14/how-to-center-text-vertically-in-a-uitextview</id>
    <content type="html"><![CDATA[<p>I create a custome text view called by: <code>VerticallyCenteredTextView</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">VerticallyCenteredTextView</span><span class="p">:</span> <span class="bp">UITextView</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">var</span> <span class="nl">contentSize</span><span class="p">:</span> <span class="bp">CGSize</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">didSet</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">var</span> <span class="n">topCorrection</span> <span class="o">=</span> <span class="p">(</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">contentSize</span><span class="p">.</span><span class="n">height</span> <span class="o">*</span> <span class="n">zoomScale</span><span class="p">)</span> <span class="o">/</span> <span class="mf">2.0</span>
</span><span class='line'>            <span class="n">topCorrection</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">topCorrection</span><span class="p">)</span>
</span><span class='line'>            <span class="n">contentInset</span> <span class="o">=</span> <span class="bp">UIEdgeInsets</span><span class="p">(</span><span class="nl">top</span><span class="p">:</span> <span class="n">topCorrection</span><span class="p">,</span> <span class="nl">left</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">bottom</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">right</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Impove Performance When Scrolling UITableView/UICollectionView?]]></title>
    <link href="http://geek-is-stupid.github.io/blog/2017/03/13/how-to-impove-scrolling-uitableview/"/>
    <updated>2017-03-13T16:53:47+07:00</updated>
    <id>http://geek-is-stupid.github.io/blog/2017/03/13/how-to-impove-scrolling-uitableview</id>
    <content type="html"><![CDATA[<h5>There are multiple ways to impove the scrolling for <code>UITableView</code>/<code>UICollectionView</code>, today I will give my way to solved it, hope it will help you guys a little bit:</h5>

<h5>Now we should think about: Why we got lagging when scroll your table view or collection view?</h5>

<p>As my experiences, 2 important things I think those will root to lagging when scroll your table view/collection view:</p>

<ul>
<li>Configure cells too expensive</li>
<li>Time to calculate height/size for cell take too long</li>
</ul>


<p>So 2 methods need to change with <code>UITableView</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="n">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UITableViewCell</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">heightForRowAt</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="n">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">CGFloat</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>1. Now we go with configure cells first:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="n">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UITableViewCell</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">let</span> <span class="nl">cell</span><span class="p">:</span> <span class="n">YourTableViewCell</span> <span class="o">=</span> <span class="n">tableView</span><span class="p">.</span><span class="n">dequeueReusableCell</span><span class="p">(</span><span class="nl">withIdentifier</span><span class="p">:</span> <span class="s">&quot;YourTableViewCell&quot;</span><span class="p">,</span> <span class="k">for</span><span class="o">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="kt">as</span><span class="o">!</span> <span class="n">MessageTableViewCell</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="nl">model</span><span class="p">:</span> <span class="n">YourModel</span> <span class="o">=</span> <span class="n">models</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">DispatchQueue</span><span class="p">(</span><span class="nl">label</span><span class="p">:</span> <span class="s">&quot;com.geek-is-stupid.queue.configure-cell&quot;</span><span class="p">).</span><span class="n">async</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">let</span> <span class="nl">image</span><span class="p">:</span> <span class="n">URL</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">image</span>
</span><span class='line'>      <span class="k">let</span> <span class="nl">age</span><span class="p">:</span> <span class="n">Int</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">age</span>
</span><span class='line'>      <span class="k">let</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">name</span>
</span><span class='line'>      <span class="k">let</span> <span class="nl">message</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">message</span>
</span><span class='line'>      <span class="n">DispatchQueue</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">async</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">cell</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">image</span>
</span><span class='line'>          <span class="n">cell</span><span class="p">.</span><span class="n">nameLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>          <span class="n">cell</span><span class="p">.</span><span class="n">ageLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">&quot;\(age)&quot;</span>
</span><span class='line'>          <span class="n">cell</span><span class="p">.</span><span class="n">messageLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">message</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="n">cell</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. Impove calculating height for cells</h3>

<ul>
<li>Calculate cell&rsquo;s height:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">YourTableViewCell</span><span class="p">:</span> <span class="bp">UITableViewCell</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">let</span> <span class="nl">shared</span><span class="p">:</span> <span class="n">MessageTableViewCell</span> <span class="o">=</span> <span class="bp">UINib</span><span class="p">(</span><span class="nl">nibName</span><span class="p">:</span> <span class="s">&quot;YourTableViewCell&quot;</span><span class="p">,</span> <span class="nl">bundle</span><span class="p">:</span> <span class="nb">nil</span><span class="p">).</span><span class="n">instantiate</span><span class="p">(</span><span class="nl">withOwner</span><span class="p">:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="kt">as</span><span class="o">!</span> <span class="n">YourTableViewCell</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">func</span> <span class="n">height</span><span class="p">(</span><span class="nl">model</span><span class="p">:</span> <span class="n">YourModel</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">CGFloat</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//Depend on your cell&#39;s layout, you will have different way to get cell&#39;s height.</span>
</span><span class='line'>      <span class="c1">// e.g There are 3 vertically labels on my cell</span>
</span><span class='line'>      <span class="k">let</span> <span class="nl">messageHeight</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">message</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="nl">font</span><span class="p">:</span> <span class="n">message</span><span class="p">.</span><span class="n">messageFont</span><span class="p">,</span> <span class="nl">width</span><span class="p">:</span> <span class="n">message</span><span class="p">.</span><span class="n">messageWidth</span><span class="p">).</span><span class="n">height</span>
</span><span class='line'>      <span class="k">let</span> <span class="nl">nameHeight</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="nl">font</span><span class="p">:</span> <span class="n">message</span><span class="p">.</span><span class="n">messageFont</span><span class="p">,</span> <span class="nl">width</span><span class="p">:</span> <span class="n">message</span><span class="p">.</span><span class="n">messageWidth</span><span class="p">).</span><span class="n">height</span>
</span><span class='line'>      <span class="k">let</span> <span class="nl">ageHeight</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="o">=</span> <span class="s">&quot;\(model.age)&quot;</span><span class="p">.</span><span class="n">size</span><span class="p">(</span><span class="nl">font</span><span class="p">:</span> <span class="n">message</span><span class="p">.</span><span class="n">messageFont</span><span class="p">,</span> <span class="nl">width</span><span class="p">:</span> <span class="n">message</span><span class="p">.</span><span class="n">messageWidth</span><span class="p">).</span><span class="n">height</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">messageHeight</span> <span class="o">+</span> <span class="n">nameHeight</span> <span class="o">+</span> <span class="n">ageHeight</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Need an array to cache calcuated heights:</li>
</ul>


<p><em>Back to your view controller</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">fileprivate</span> <span class="k">var</span> <span class="nl">cachedHeights</span><span class="p">:</span> <span class="p">[</span><span class="nl">Int</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="o">:</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">heightForRowAt</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="n">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">CGFloat</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="k">let</span> <span class="n">cellHeight</span> <span class="o">=</span> <span class="n">cachedHeights</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">cellHeight</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">let</span> <span class="nl">model</span><span class="p">:</span> <span class="n">YourModel</span> <span class="o">=</span> <span class="n">models</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">]</span>
</span><span class='line'>  <span class="k">let</span> <span class="nl">cell</span><span class="p">:</span> <span class="n">YourTableViewCell</span> <span class="o">=</span> <span class="p">.</span><span class="n">shared</span>
</span><span class='line'>  <span class="k">let</span> <span class="nl">cellHeight</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="o">=</span> <span class="n">cell</span><span class="p">.</span><span class="n">height</span><span class="p">(</span><span class="nl">model</span><span class="p">:</span> <span class="n">model</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cachedHeights</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">cellHeight</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">cellHeight</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Method to get size for a string</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">size</span><span class="p">(</span><span class="nl">font</span><span class="p">:</span> <span class="bp">UIFont</span><span class="p">,</span> <span class="nl">width</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">CGSize</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">attrString</span><span class="p">:</span> <span class="bp">NSAttributedString</span> <span class="o">=</span> <span class="bp">NSAttributedString</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="nb">self</span><span class="p">,</span> <span class="nl">attributes</span><span class="p">:</span> <span class="p">[</span><span class="nl">NSFontAttributeName</span><span class="p">:</span> <span class="n">font</span><span class="p">])</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">bounds</span><span class="p">:</span> <span class="bp">CGRect</span> <span class="o">=</span> <span class="n">attrString</span><span class="p">.</span><span class="n">boundingRect</span><span class="p">(</span><span class="nl">with</span><span class="p">:</span> <span class="bp">CGSize</span><span class="p">(</span><span class="nl">width</span><span class="p">:</span> <span class="n">width</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">),</span> <span class="nl">options</span><span class="p">:</span> <span class="p">.</span><span class="n">usesLineFragmentOrigin</span><span class="p">,</span> <span class="nl">context</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">size</span><span class="p">:</span> <span class="bp">CGSize</span> <span class="o">=</span> <span class="bp">CGSize</span><span class="p">(</span><span class="nl">width</span><span class="p">:</span> <span class="n">bounds</span><span class="p">.</span><span class="n">width</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="n">bounds</span><span class="p">.</span><span class="n">height</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="n">font</span><span class="p">.</span><span class="n">lineHeight</span> <span class="o">-</span> <span class="n">font</span><span class="p">.</span><span class="n">pointSize</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">size</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK, hope this works for you guys!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIImage Display Wrong Orientation, What Is Solution?]]></title>
    <link href="http://geek-is-stupid.github.io/blog/2017/03/04/uiimage-display-wrong-orientation-what-is-solution/"/>
    <updated>2017-03-04T11:08:44+07:00</updated>
    <id>http://geek-is-stupid.github.io/blog/2017/03/04/uiimage-display-wrong-orientation-what-is-solution</id>
    <content type="html"><![CDATA[<h5>Some time UImage show wrong orientation, and it make you annoyed!!!</h5>

<p>Don&rsquo;t worry, I&rsquo;m here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="bp">UIImage</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">rotateCameraImageToProperOrientation</span><span class="p">(</span><span class="nl">maxResolution</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UIImage</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">imgRef</span><span class="p">:</span> <span class="bp">CGImage</span> <span class="o">=</span> <span class="n">cgImage</span><span class="o">!</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">width</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="o">=</span> <span class="n">CGFloat</span><span class="p">(</span><span class="n">imgRef</span><span class="p">.</span><span class="n">width</span><span class="p">)</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">height</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="o">=</span> <span class="n">CGFloat</span><span class="p">(</span><span class="n">imgRef</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">var</span> <span class="nl">bounds</span><span class="p">:</span> <span class="bp">CGRect</span> <span class="o">=</span> <span class="bp">CGRect</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">width</span><span class="p">:</span> <span class="n">width</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="n">height</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">var</span> <span class="nl">scaleRatio</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">width</span> <span class="o">&gt;</span> <span class="n">maxResolution</span> <span class="o">||</span> <span class="n">height</span> <span class="o">&gt;</span> <span class="n">maxResolution</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">scaleRatio</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">maxResolution</span> <span class="o">/</span> <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">maxResolution</span> <span class="o">/</span> <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>            <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">*</span> <span class="n">scaleRatio</span>
</span><span class='line'>            <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="n">scaleRatio</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">var</span> <span class="nl">transform</span><span class="p">:</span> <span class="bp">CGAffineTransform</span> <span class="o">=</span> <span class="p">.</span><span class="n">identity</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">orient</span><span class="p">:</span> <span class="n">UIImageOrientation</span> <span class="o">=</span> <span class="n">imageOrientation</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">imageSize</span><span class="p">:</span> <span class="bp">CGSize</span> <span class="o">=</span> <span class="bp">CGSize</span><span class="p">(</span><span class="nl">width</span><span class="p">:</span> <span class="n">imgRef</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="n">imgRef</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">switch</span> <span class="n">imageOrientation</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">up</span> <span class="p">:</span>
</span><span class='line'>            <span class="n">transform</span> <span class="o">=</span> <span class="p">.</span><span class="n">identity</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">upMirrored</span> <span class="p">:</span>
</span><span class='line'>            <span class="n">transform</span> <span class="o">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="nl">translationX</span><span class="p">:</span> <span class="n">imageSize</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">transform</span> <span class="o">=</span> <span class="n">transform</span><span class="p">.</span><span class="n">scaledBy</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">down</span> <span class="p">:</span>
</span><span class='line'>            <span class="n">transform</span> <span class="o">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="nl">translationX</span><span class="p">:</span> <span class="n">imageSize</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="n">imageSize</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>            <span class="n">transform</span> <span class="o">=</span> <span class="n">transform</span><span class="p">.</span><span class="n">rotated</span><span class="p">(</span><span class="nl">by</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">.</span><span class="n">pi</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">downMirrored</span> <span class="p">:</span>
</span><span class='line'>            <span class="n">transform</span> <span class="o">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="nl">translationX</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="n">imageSize</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>            <span class="n">transform</span> <span class="o">=</span> <span class="n">transform</span><span class="p">.</span><span class="n">scaledBy</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">left</span> <span class="p">:</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">storedHeight</span> <span class="o">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>            <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>            <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">storedHeight</span>
</span><span class='line'>            <span class="n">transform</span> <span class="o">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="nl">translationX</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="n">imageSize</span><span class="p">.</span><span class="n">width</span><span class="p">)</span>
</span><span class='line'>            <span class="n">transform</span> <span class="o">=</span> <span class="n">transform</span><span class="p">.</span><span class="n">rotated</span><span class="p">(</span><span class="nl">by</span><span class="p">:</span> <span class="mf">3.0</span> <span class="o">*</span> <span class="n">CGFloat</span><span class="p">.</span><span class="n">pi</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">leftMirrored</span> <span class="p">:</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">storedHeight</span> <span class="o">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>            <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>            <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">storedHeight</span>
</span><span class='line'>            <span class="n">transform</span> <span class="o">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="nl">translationX</span><span class="p">:</span> <span class="n">imageSize</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="n">imageSize</span><span class="p">.</span><span class="n">width</span><span class="p">)</span>
</span><span class='line'>            <span class="n">transform</span> <span class="o">=</span> <span class="n">transform</span><span class="p">.</span><span class="n">scaledBy</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>            <span class="n">transform</span> <span class="o">=</span> <span class="n">transform</span><span class="p">.</span><span class="n">rotated</span><span class="p">(</span><span class="nl">by</span><span class="p">:</span> <span class="mf">3.0</span> <span class="o">*</span> <span class="n">CGFloat</span><span class="p">.</span><span class="n">pi</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">right</span> <span class="p">:</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">storedHeight</span> <span class="o">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>            <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>            <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">storedHeight</span>
</span><span class='line'>            <span class="n">transform</span> <span class="o">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="nl">translationX</span><span class="p">:</span> <span class="n">imageSize</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">transform</span> <span class="o">=</span> <span class="n">transform</span><span class="p">.</span><span class="n">rotated</span><span class="p">(</span><span class="nl">by</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">.</span><span class="n">pi</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="nl">rightMirrored</span> <span class="p">:</span>
</span><span class='line'>            <span class="k">let</span> <span class="nl">storedHeight</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="o">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>            <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>            <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">storedHeight</span>
</span><span class='line'>            <span class="n">transform</span> <span class="o">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="nl">scaleX</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>            <span class="n">transform</span> <span class="o">=</span> <span class="n">transform</span><span class="p">.</span><span class="n">rotated</span><span class="p">(</span><span class="nl">by</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">.</span><span class="n">pi</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">UIGraphicsBeginImageContext</span><span class="p">(</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">context</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">orient</span> <span class="o">==</span> <span class="p">.</span><span class="kr">right</span> <span class="o">||</span> <span class="n">orient</span> <span class="o">==</span> <span class="p">.</span><span class="kr">left</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">context</span><span class="o">!</span><span class="p">.</span><span class="n">scaleBy</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="o">-</span><span class="n">scaleRatio</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="n">scaleRatio</span><span class="p">)</span>
</span><span class='line'>            <span class="n">context</span><span class="o">!</span><span class="p">.</span><span class="n">translateBy</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="o">-</span><span class="n">height</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">context</span><span class="o">!</span><span class="p">.</span><span class="n">scaleBy</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="n">scaleRatio</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="o">-</span><span class="n">scaleRatio</span><span class="p">)</span>
</span><span class='line'>            <span class="n">context</span><span class="o">!</span><span class="p">.</span><span class="n">translateBy</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="o">-</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">context</span><span class="o">!</span><span class="p">.</span><span class="n">concatenate</span><span class="p">(</span><span class="n">transform</span><span class="p">)</span>
</span><span class='line'>        <span class="n">context</span><span class="o">!</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="n">imgRef</span><span class="p">,</span> <span class="k">in</span><span class="o">:</span> <span class="bp">CGRect</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">width</span><span class="p">:</span> <span class="n">width</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="n">height</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">imageCopy</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">()</span>
</span><span class='line'>        <span class="n">UIGraphicsEndImageContext</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">imageCopy</span><span class="o">!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Now just update your image:</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="nl">maxResolution</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">yourImage</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">yourImage</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="nl">updatedImage</span><span class="p">:</span> <span class="bp">UIImage</span> <span class="o">=</span> <span class="n">yourImage</span><span class="p">.</span><span class="n">rotateCameraImageToProperOrientation</span><span class="p">(</span><span class="nl">maxResolution</span><span class="p">:</span> <span class="n">maxResolution</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>See you!!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Create a Blur or Grayscale UIImage?]]></title>
    <link href="http://geek-is-stupid.github.io/blog/2017/03/04/how-to-create-a-blur-or-grayscale-uiimage/"/>
    <updated>2017-03-04T11:02:22+07:00</updated>
    <id>http://geek-is-stupid.github.io/blog/2017/03/04/how-to-create-a-blur-or-grayscale-uiimage</id>
    <content type="html"><![CDATA[<h5>Basically we are using <code>CIFilter</code> for everything</h5>

<h4>Who want a BLUR image:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="bp">UIImage</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="nl">blur</span><span class="p">:</span> <span class="bp">UIImage</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">inputImage</span><span class="p">:</span> <span class="bp">CIImage</span> <span class="o">=</span> <span class="bp">CIImage</span><span class="p">(</span><span class="nl">image</span><span class="p">:</span> <span class="nb">self</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">blurFilter</span><span class="p">:</span> <span class="bp">CIFilter</span> <span class="o">=</span> <span class="bp">CIFilter</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">&quot;CIGaussianBlur&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>        <span class="n">blurFilter</span><span class="p">.</span><span class="n">setDefaults</span><span class="p">()</span>
</span><span class='line'>        <span class="n">blurFilter</span><span class="p">.</span><span class="n">setValue</span><span class="p">(</span><span class="n">inputImage</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;inputImage&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">blurFilter</span><span class="p">.</span><span class="n">setValue</span><span class="p">(</span><span class="mf">50.0</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;inputRadius&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">outputImage</span><span class="p">:</span> <span class="bp">CIImage</span> <span class="o">=</span> <span class="n">blurFilter</span><span class="p">.</span><span class="n">outputImage</span><span class="o">!</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">context</span><span class="p">:</span> <span class="bp">CIContext</span> <span class="o">=</span> <span class="bp">CIContext</span><span class="p">()</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">cgImage</span><span class="p">:</span> <span class="bp">CGImage</span> <span class="o">=</span> <span class="n">context</span><span class="p">.</span><span class="n">createCGImage</span><span class="p">(</span><span class="n">outputImage</span><span class="p">,</span> <span class="nl">from</span><span class="p">:</span> <span class="n">outputImage</span><span class="p">.</span><span class="n">extent</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">image</span><span class="p">:</span> <span class="bp">UIImage</span> <span class="o">=</span> <span class="bp">UIImage</span><span class="p">(</span><span class="nl">cgImage</span><span class="p">:</span> <span class="n">cgImage</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">image</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Now it&rsquo;s GRAYSCALE:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="bp">UIImage</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="nl">grayscale</span><span class="p">:</span> <span class="bp">UIImage</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">ciImage</span><span class="p">:</span> <span class="bp">CIImage</span> <span class="o">=</span> <span class="bp">CIImage</span><span class="p">(</span><span class="nl">image</span><span class="p">:</span> <span class="nb">self</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="nl">colorFilter</span><span class="p">:</span> <span class="bp">CIFilter</span> <span class="o">=</span> <span class="bp">CIFilter</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">&quot;CIColorControls&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>        <span class="n">colorFilter</span><span class="p">.</span><span class="n">setValue</span><span class="p">(</span><span class="n">ciImage</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="n">kCIInputImageKey</span><span class="p">)</span>
</span><span class='line'>        <span class="n">colorFilter</span><span class="p">.</span><span class="n">setValue</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="n">kCIInputBrightnessKey</span><span class="p">)</span>
</span><span class='line'>        <span class="n">colorFilter</span><span class="p">.</span><span class="n">setValue</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="n">kCIInputSaturationKey</span><span class="p">)</span>
</span><span class='line'>        <span class="n">colorFilter</span><span class="p">.</span><span class="n">setValue</span><span class="p">(</span><span class="mf">1.1</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="n">kCIInputContrastKey</span><span class="p">)</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">intermediateImage</span><span class="p">:</span> <span class="bp">CIImage</span> <span class="o">=</span> <span class="n">colorFilter</span><span class="p">.</span><span class="n">outputImage</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="nl">exposureFilter</span><span class="p">:</span> <span class="bp">CIFilter</span> <span class="o">=</span> <span class="bp">CIFilter</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span><span class="s">&quot;CIExposureAdjust&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>        <span class="n">exposureFilter</span><span class="p">.</span><span class="n">setValue</span><span class="p">(</span><span class="n">intermediateImage</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="n">kCIInputImageKey</span><span class="p">)</span>
</span><span class='line'>        <span class="n">exposureFilter</span><span class="p">.</span><span class="n">setValue</span><span class="p">(</span><span class="mf">0.7</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="n">kCIInputEVKey</span><span class="p">)</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">output</span><span class="p">:</span> <span class="bp">CIImage</span><span class="o">!</span> <span class="o">=</span> <span class="n">exposureFilter</span><span class="p">.</span><span class="n">outputImage</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="nl">context</span><span class="p">:</span> <span class="bp">CIContext</span> <span class="o">=</span> <span class="bp">CIContext</span><span class="p">(</span><span class="nl">options</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">cgImage</span><span class="p">:</span> <span class="bp">CGImage</span> <span class="o">=</span> <span class="n">context</span><span class="p">.</span><span class="n">createCGImage</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="nl">from</span><span class="p">:</span> <span class="n">output</span><span class="p">.</span><span class="n">extent</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="nl">image</span><span class="p">:</span> <span class="bp">UIImage</span> <span class="o">=</span> <span class="bp">UIImage</span><span class="p">(</span><span class="nl">cgImage</span><span class="p">:</span> <span class="n">cgImage</span><span class="p">,</span> <span class="nl">scale</span><span class="p">:</span> <span class="n">scale</span><span class="p">,</span> <span class="nl">orientation</span><span class="p">:</span> <span class="n">imageOrientation</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">image</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Cooool:</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="nl">bluredUmage</span><span class="p">:</span> <span class="bp">UIImage</span> <span class="o">=</span> <span class="n">yourImage</span><span class="p">.</span><span class="n">blur</span>
</span><span class='line'><span class="k">let</span> <span class="nl">grayscaledImage</span><span class="p">:</span> <span class="bp">UIImage</span> <span class="o">=</span> <span class="n">yourImage</span><span class="p">.</span><span class="n">grayscale</span>
</span></code></pre></td></tr></table></div></figure>


<p>Feel the beat</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Detect an UIImage Contains Face Using Swift3?]]></title>
    <link href="http://geek-is-stupid.github.io/blog/2017/03/04/how-to-detect-an-uiimage-contains-face-using-swift3/"/>
    <updated>2017-03-04T10:58:56+07:00</updated>
    <id>http://geek-is-stupid.github.io/blog/2017/03/04/how-to-detect-an-uiimage-contains-face-using-swift3</id>
    <content type="html"><![CDATA[<h5>Face Detection</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">import</span> <span class="n">ImageIO</span>
</span><span class='line'>
</span><span class='line'><span class="k">extension</span> <span class="bp">UIImage</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="nl">hasFaces</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">ciImage</span><span class="p">:</span> <span class="bp">CIImage</span> <span class="o">=</span> <span class="bp">CIImage</span><span class="p">(</span><span class="nl">cgImage</span><span class="p">:</span> <span class="n">cgImage</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">options</span><span class="p">:</span> <span class="p">[</span><span class="nl">String</span><span class="p">:</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nl">CIDetectorAccuracy</span><span class="p">:</span> <span class="n">CIDetectorAccuracyHigh</span><span class="p">]</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">faceDetector</span><span class="p">:</span> <span class="bp">CIDetector</span> <span class="o">=</span> <span class="bp">CIDetector</span><span class="p">(</span><span class="nl">ofType</span><span class="p">:</span> <span class="n">CIDetectorTypeFace</span><span class="p">,</span> <span class="nl">context</span><span class="p">:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="n">options</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">faces</span><span class="p">:</span> <span class="p">[</span><span class="bp">CIFaceFeature</span><span class="p">]</span> <span class="o">=</span> <span class="n">faceDetector</span><span class="p">.</span><span class="n">features</span><span class="p">(</span><span class="k">in</span><span class="o">:</span> <span class="n">ciImage</span><span class="p">).</span><span class="n">flatMap</span><span class="p">({</span> <span class="err">$</span><span class="mi">0</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">CIFaceFeature</span> <span class="p">})</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">!</span><span class="n">faces</span><span class="p">.</span><span class="n">isEmpty</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Show time:</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">debugPrint</span><span class="p">(</span><span class="n">yourImage</span><span class="p">.</span> <span class="n">hasFaces</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nice coffee</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Compress UIImage Using Swift3?]]></title>
    <link href="http://geek-is-stupid.github.io/blog/2017/03/04/how-to-compress-uiimage-using-swift/"/>
    <updated>2017-03-04T10:54:43+07:00</updated>
    <id>http://geek-is-stupid.github.io/blog/2017/03/04/how-to-compress-uiimage-using-swift</id>
    <content type="html"><![CDATA[<h4>Following:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="bp">UIImage</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">data</span><span class="p">:</span> <span class="n">Data</span><span class="o">?</span> <span class="p">{</span> <span class="k">return</span> <span class="n">UIImagePNGRepresentation</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">highestQualityJPEGData</span><span class="p">:</span> <span class="n">Data</span><span class="o">?</span> <span class="p">{</span> <span class="k">return</span> <span class="n">UIImageJPEGRepresentation</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)</span>  <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">highQualityJPEGData</span><span class="p">:</span> <span class="n">Data</span><span class="o">?</span>    <span class="p">{</span> <span class="k">return</span> <span class="n">UIImageJPEGRepresentation</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="mf">0.75</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">mediumQualityJPEGData</span><span class="p">:</span> <span class="n">Data</span><span class="o">?</span>  <span class="p">{</span> <span class="k">return</span> <span class="n">UIImageJPEGRepresentation</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span>  <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">lowQualityJPEGData</span><span class="p">:</span> <span class="n">Data</span><span class="o">?</span>     <span class="p">{</span> <span class="k">return</span> <span class="n">UIImageJPEGRepresentation</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">lowestQualityJPEGData</span><span class="p">:</span> <span class="n">Data</span><span class="o">?</span>   <span class="p">{</span> <span class="k">return</span> <span class="n">UIImageJPEGRepresentation</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">)</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Time is your!!!</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">yourImage</span><span class="p">.</span><span class="n">data</span>
</span><span class='line'><span class="n">yourImage</span><span class="p">.</span><span class="n">highestQualityJPEGData</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Detect That String Contains Emoji Using Swift?]]></title>
    <link href="http://geek-is-stupid.github.io/blog/2017/03/04/how-to-detect-that-string-contains-emoji-using-swift/"/>
    <updated>2017-03-04T10:47:58+07:00</updated>
    <id>http://geek-is-stupid.github.io/blog/2017/03/04/how-to-detect-that-string-contains-emoji-using-swift</id>
    <content type="html"><![CDATA[<h5>We can do like this:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="nl">containsEmoji</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">scalar</span> <span class="k">in</span> <span class="n">unicodeScalars</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">switch</span> <span class="n">scalar</span><span class="p">.</span><span class="n">value</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="mh">0x3030</span><span class="p">,</span> <span class="mh">0x00AE</span><span class="p">,</span> <span class="mh">0x00A9</span><span class="p">,</span><span class="c1">// Special Characters</span>
</span><span class='line'>            <span class="mh">0x1D000</span><span class="p">..</span><span class="mf">.0</span><span class="n">x1F77F</span><span class="p">,</span>          <span class="c1">// Emoticons</span>
</span><span class='line'>            <span class="mh">0x2100</span><span class="p">..</span><span class="mf">.0</span><span class="n">x27BF</span><span class="p">,</span>            <span class="c1">// Misc symbols and Dingbats</span>
</span><span class='line'>            <span class="mh">0xFE00</span><span class="p">..</span><span class="mf">.0</span><span class="n">xFE0F</span><span class="p">,</span>            <span class="c1">// Variation Selectors</span>
</span><span class='line'>            <span class="mh">0x1F900</span><span class="p">..</span><span class="mf">.0</span><span class="nl">x1F9FF</span><span class="p">:</span>          <span class="c1">// Supplemental Symbols and Pictographs</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="k">continue</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Show time:</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="nl">string</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;Hello world!!! 😘😍🤗&quot;</span>
</span><span class='line'><span class="n">debugPrint</span><span class="p">(</span><span class="n">string</span><span class="p">.</span><span class="n">containsEmoji</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Have a nice day!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Create an Updating Mechanism for an iOS App?]]></title>
    <link href="http://geek-is-stupid.github.io/blog/2017/03/04/how-to-create-an-updating-mechanism-for-an-ios-app/"/>
    <updated>2017-03-04T10:36:35+07:00</updated>
    <id>http://geek-is-stupid.github.io/blog/2017/03/04/how-to-create-an-updating-mechanism-for-an-ios-app</id>
    <content type="html"><![CDATA[<h6>The idea is we checking the current version on AppStore and the version on your app, if they are not equal then make an updating!!!</h6>

<h5>But hold on, what happen if AppStore&rsquo;s review team test your app, and they will use the lastest version, and it&rsquo;s version absolutely difference with your app&rsquo;s version on AppStore?</h5>

<h5>Solution is: <code>LastReleasedDate</code></h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="bp">UIApplication</span> <span class="p">{</span>
</span><span class='line'><span class="k">class</span> <span class="k">var</span> <span class="nl">needsUpdate</span><span class="p">:</span> <span class="p">(</span><span class="nl">isNeeded</span><span class="p">:</span> <span class="n">Bool</span><span class="p">,</span> <span class="nl">version</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">let</span> <span class="nl">url</span><span class="p">:</span> <span class="n">URL</span> <span class="o">=</span> <span class="n">URL</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="s">&quot;http://itunes.apple.com/lookup?bundleId=\(appBundle)&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>            <span class="k">let</span> <span class="nl">data</span><span class="p">:</span> <span class="n">Data</span> <span class="o">=</span> <span class="n">try</span> <span class="n">Data</span><span class="p">(</span><span class="nl">contentsOf</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>            <span class="n">guard</span> <span class="k">let</span> <span class="nl">json</span><span class="p">:</span> <span class="p">[</span><span class="nl">String</span><span class="p">:</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="n">try</span> <span class="n">JSONSerialization</span><span class="p">.</span><span class="n">jsonObject</span><span class="p">(</span><span class="nl">with</span><span class="p">:</span> <span class="n">data</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">[.</span><span class="n">allowFragments</span><span class="p">])</span> <span class="kt">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String</span><span class="p">:</span> <span class="n">Any</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span><span class="nb">false</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="k">let</span> <span class="nl">result</span><span class="p">:</span> <span class="p">[</span><span class="nl">String</span><span class="p">:</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">json</span><span class="p">[</span><span class="s">&quot;results&quot;</span><span class="p">]</span> <span class="kt">as</span><span class="o">?</span> <span class="p">[</span><span class="n">Any</span><span class="p">])</span><span class="o">?</span><span class="p">.</span><span class="n">first</span> <span class="kt">as</span><span class="o">?</span> <span class="p">[</span><span class="nl">String</span><span class="p">:</span> <span class="n">Any</span><span class="p">],</span>
</span><span class='line'>                <span class="k">let</span> <span class="nl">appStoreVersion</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s">&quot;version&quot;</span><span class="p">]</span> <span class="kt">as</span><span class="o">?</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>                <span class="k">let</span> <span class="nl">releaseDate</span><span class="p">:</span> <span class="n">Date</span> <span class="o">=</span> <span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="s">&quot;releaseDate&quot;</span><span class="p">]</span> <span class="kt">as</span><span class="o">?</span> <span class="n">String</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">date</span><span class="p">(</span><span class="nl">dateFormat</span><span class="p">:</span> <span class="s">&quot;yyyy-MM-dd&#39;T&#39;hh:mm:ssZ&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">let</span> <span class="nl">flag</span><span class="p">:</span> <span class="n">Bool</span>
</span><span class='line'>                <span class="k">if</span> <span class="k">let</span> <span class="nl">lastReleasedTimeString</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">UserDefaults</span><span class="p">.</span><span class="n">standard</span><span class="p">.</span><span class="n">string</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;com.levantAJ.geek-is-stupid.last-released-date&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">let</span> <span class="nl">lastReleasedTime</span><span class="p">:</span> <span class="n">Double</span> <span class="o">=</span> <span class="n">Double</span><span class="p">(</span><span class="n">lastReleasedTimeString</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>                    <span class="n">flag</span> <span class="o">=</span> <span class="n">version</span><span class="p">.</span><span class="kt">short</span> <span class="o">!=</span> <span class="n">appStoreVersion</span> <span class="o">&amp;&amp;</span> <span class="n">lastReleasedTime</span> <span class="o">&lt;</span> <span class="n">releaseDate</span><span class="p">.</span><span class="n">timeIntervalSince1970</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">flag</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">UserDefaults</span><span class="p">.</span><span class="n">standard</span><span class="p">.</span><span class="kr">set</span><span class="p">(</span><span class="n">releaseDate</span><span class="p">.</span><span class="n">timeIntervalSince1970</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;com.levantAJ.geek-is-stupid.last-released-date&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">UserDefaults</span><span class="p">.</span><span class="n">standard</span><span class="p">.</span><span class="kr">set</span><span class="p">(</span><span class="n">releaseDate</span><span class="p">.</span><span class="n">timeIntervalSince1970</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;com.levantAJ.geek-is-stupid.last-released-date&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">return</span> <span class="p">(</span><span class="n">flag</span><span class="p">,</span> <span class="n">appStoreVersion</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">catch</span> <span class="k">let</span> <span class="n">error</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">debugPrint</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="nb">false</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nb">false</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>This variable will give you an flag to indicated that should be update your application, and current app&rsquo;s version on AppStore</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="p">(</span><span class="n">isNeededToUpdate</span><span class="p">,</span> <span class="n">appVersionOnAppStore</span><span class="p">)</span> <span class="o">=</span> <span class="bp">UIApplication</span><span class="p">.</span><span class="n">needsUpdate</span>
</span><span class='line'><span class="n">debugPrint</span><span class="p">(</span><span class="n">isNeededToUpdate</span><span class="p">)</span>
</span><span class='line'><span class="n">debugPrint</span><span class="p">(</span><span class="n">appVersionOnAppStore</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Make a UIColor From HEX?]]></title>
    <link href="http://geek-is-stupid.github.io/blog/2017/03/04/how-to-make-a-uicolor-from-hex/"/>
    <updated>2017-03-04T10:28:55+07:00</updated>
    <id>http://geek-is-stupid.github.io/blog/2017/03/04/how-to-make-a-uicolor-from-hex</id>
    <content type="html"><![CDATA[<h5>We create a new construction method for UIColor:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="bp">UIColor</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">convenience</span> <span class="k">init</span><span class="o">?</span><span class="p">(</span><span class="nl">hex</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">alpha</span><span class="p">:</span> <span class="n">Float</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">hex</span> <span class="o">=</span> <span class="n">hex</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">hex</span><span class="p">.</span><span class="n">hasPrefix</span><span class="p">(</span><span class="s">&quot;#&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">hex</span> <span class="o">=</span> <span class="n">hex</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="nl">from</span><span class="p">:</span> <span class="n">hex</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">hex</span><span class="p">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nl">offsetBy</span><span class="p">:</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="k">let</span> <span class="n">_</span> <span class="o">=</span> <span class="n">hex</span><span class="p">.</span><span class="n">range</span><span class="p">(</span><span class="nl">of</span><span class="p">:</span> <span class="s">&quot;(^[0-9A-Fa-f]{6}$)|(^[0-9A-Fa-f]{3}$)&quot;</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">.</span><span class="n">regularExpression</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="n">hex</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">3</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">redHex</span>   <span class="o">=</span> <span class="n">hex</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="nl">to</span><span class="p">:</span> <span class="n">hex</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">hex</span><span class="p">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nl">offsetBy</span><span class="p">:</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">greenHex</span> <span class="o">=</span> <span class="n">hex</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="nl">with</span><span class="p">:</span> <span class="n">hex</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">hex</span><span class="p">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nl">offsetBy</span><span class="p">:</span> <span class="mi">1</span><span class="p">)..</span><span class="o">&lt;</span><span class="n">hex</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">hex</span><span class="p">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nl">offsetBy</span><span class="p">:</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">blueHex</span>  <span class="o">=</span> <span class="n">hex</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="nl">from</span><span class="p">:</span> <span class="n">hex</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">hex</span><span class="p">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nl">offsetBy</span><span class="p">:</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">hex</span> <span class="o">=</span> <span class="n">redHex</span> <span class="o">+</span> <span class="n">redHex</span> <span class="o">+</span> <span class="n">greenHex</span> <span class="o">+</span> <span class="n">greenHex</span> <span class="o">+</span> <span class="n">blueHex</span> <span class="o">+</span> <span class="n">blueHex</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">let</span> <span class="n">redHex</span> <span class="o">=</span> <span class="n">hex</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="nl">to</span><span class="p">:</span> <span class="n">hex</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">hex</span><span class="p">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nl">offsetBy</span><span class="p">:</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">greenHex</span> <span class="o">=</span> <span class="n">hex</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="nl">with</span><span class="p">:</span> <span class="n">hex</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">hex</span><span class="p">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nl">offsetBy</span><span class="p">:</span> <span class="mi">2</span><span class="p">)..</span><span class="o">&lt;</span><span class="n">hex</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">hex</span><span class="p">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nl">offsetBy</span><span class="p">:</span> <span class="mi">4</span><span class="p">))</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">blueHex</span> <span class="o">=</span> <span class="n">hex</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="nl">with</span><span class="p">:</span> <span class="n">hex</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">hex</span><span class="p">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nl">offsetBy</span><span class="p">:</span> <span class="mi">4</span><span class="p">)..</span><span class="o">&lt;</span><span class="n">hex</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">hex</span><span class="p">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="nl">offsetBy</span><span class="p">:</span> <span class="mi">6</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">var</span> <span class="nl">redInt</span><span class="p">:</span>   <span class="n">CUnsignedInt</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="k">var</span> <span class="nl">greenInt</span><span class="p">:</span> <span class="n">CUnsignedInt</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="k">var</span> <span class="nl">blueInt</span><span class="p">:</span>  <span class="n">CUnsignedInt</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Scanner</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="n">redHex</span><span class="p">).</span><span class="n">scanHexInt32</span><span class="p">(</span><span class="o">&amp;</span><span class="n">redInt</span><span class="p">)</span>
</span><span class='line'>            <span class="n">Scanner</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="n">greenHex</span><span class="p">).</span><span class="n">scanHexInt32</span><span class="p">(</span><span class="o">&amp;</span><span class="n">greenInt</span><span class="p">)</span>
</span><span class='line'>            <span class="n">Scanner</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="n">blueHex</span><span class="p">).</span><span class="n">scanHexInt32</span><span class="p">(</span><span class="o">&amp;</span><span class="n">blueInt</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">red</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">(</span><span class="n">redInt</span><span class="p">)</span> <span class="o">/</span> <span class="mf">255.0</span><span class="p">,</span> <span class="nl">green</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">(</span><span class="n">greenInt</span><span class="p">)</span> <span class="o">/</span> <span class="mf">255.0</span><span class="p">,</span> <span class="nl">blue</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">(</span><span class="n">blueInt</span><span class="p">)</span> <span class="o">/</span> <span class="mf">255.0</span><span class="p">,</span> <span class="nl">alpha</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">(</span><span class="n">alpha</span><span class="p">))</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="k">init</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>OK:</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="nl">color</span><span class="p">:</span> <span class="bp">UIColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">(</span><span class="nl">hex</span><span class="p">:</span> <span class="s">&quot;#4286f4&quot;</span><span class="p">)</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Question how to get hex string from an UIColor?</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="bp">UIColor</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="nl">hex</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="nl">r</span><span class="p">:</span><span class="n">CGFloat</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">var</span> <span class="nl">g</span><span class="p">:</span><span class="n">CGFloat</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">var</span> <span class="nl">b</span><span class="p">:</span><span class="n">CGFloat</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">var</span> <span class="nl">a</span><span class="p">:</span><span class="n">CGFloat</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">getRed</span><span class="p">(</span><span class="o">&amp;</span><span class="n">r</span><span class="p">,</span> <span class="nl">green</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">g</span><span class="p">,</span> <span class="nl">blue</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">,</span> <span class="nl">alpha</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="nl">rgb</span><span class="p">:</span><span class="n">Int</span> <span class="o">=</span> <span class="p">(</span><span class="n">Int</span><span class="p">)(</span><span class="n">r</span><span class="o">*</span><span class="mi">255</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">16</span> <span class="o">|</span> <span class="p">(</span><span class="n">Int</span><span class="p">)(</span><span class="n">g</span><span class="o">*</span><span class="mi">255</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">8</span> <span class="o">|</span> <span class="p">(</span><span class="n">Int</span><span class="p">)(</span><span class="n">b</span><span class="o">*</span><span class="mi">255</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="bp">NSString</span><span class="p">(</span><span class="nl">format</span><span class="p">:</span><span class="s">&quot;%06x&quot;</span><span class="p">,</span> <span class="n">rgb</span><span class="p">)</span> <span class="kt">as</span> <span class="n">String</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Show time:</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">debugPrint</span><span class="p">(</span><span class="n">yourColor</span><span class="p">.</span><span class="n">hex</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Align Vertical Image and Title in UIButton?]]></title>
    <link href="http://geek-is-stupid.github.io/blog/2017/03/04/how-to-align-vertical-image-and-title-in-uibutton/"/>
    <updated>2017-03-04T10:22:06+07:00</updated>
    <id>http://geek-is-stupid.github.io/blog/2017/03/04/how-to-align-vertical-image-and-title-in-uibutton</id>
    <content type="html"><![CDATA[<h5>Following code below:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="bp">UIButton</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">alignImageAndTitleVertically</span><span class="p">(</span><span class="nl">padding</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="o">=</span> <span class="mf">4.0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">imageSize</span> <span class="o">=</span> <span class="n">imageView</span><span class="o">!</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">titleSize</span> <span class="o">=</span> <span class="n">titleLabel</span><span class="o">!</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">totalHeight</span> <span class="o">=</span> <span class="n">imageSize</span><span class="p">.</span><span class="n">height</span> <span class="o">+</span> <span class="n">titleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">+</span> <span class="n">padding</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">imageEdgeInsets</span> <span class="o">=</span> <span class="bp">UIEdgeInsets</span><span class="p">(</span>
</span><span class='line'>            <span class="nl">top</span><span class="p">:</span> <span class="o">-</span><span class="p">(</span><span class="n">totalHeight</span> <span class="o">-</span> <span class="n">imageSize</span><span class="p">.</span><span class="n">height</span><span class="p">),</span>
</span><span class='line'>            <span class="nl">left</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>            <span class="nl">bottom</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>            <span class="nl">right</span><span class="p">:</span> <span class="o">-</span><span class="n">titleSize</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">titleEdgeInsets</span> <span class="o">=</span> <span class="bp">UIEdgeInsets</span><span class="p">(</span>
</span><span class='line'>            <span class="nl">top</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>            <span class="nl">left</span><span class="p">:</span> <span class="o">-</span><span class="n">imageSize</span><span class="p">.</span><span class="n">width</span><span class="p">,</span>
</span><span class='line'>            <span class="nl">bottom</span><span class="p">:</span> <span class="o">-</span><span class="p">(</span><span class="n">totalHeight</span> <span class="o">-</span> <span class="n">titleSize</span><span class="p">.</span><span class="n">height</span><span class="p">),</span>
</span><span class='line'>            <span class="nl">right</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Show time:</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">button</span><span class="p">.</span><span class="n">alignImageAndTitleVertically</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Good luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Align Right an Image in UIButton?]]></title>
    <link href="http://geek-is-stupid.github.io/blog/2017/03/04/how-to-align-right-an-image-in-uibutton/"/>
    <updated>2017-03-04T10:17:56+07:00</updated>
    <id>http://geek-is-stupid.github.io/blog/2017/03/04/how-to-align-right-an-image-in-uibutton</id>
    <content type="html"><![CDATA[<h5>Everything you need is:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="bp">UIButton</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">imageToRight</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">transform</span> <span class="o">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="nl">scaleX</span><span class="p">:</span> <span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">titleLabel</span><span class="o">?</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="nl">scaleX</span><span class="p">:</span> <span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">imageView</span><span class="o">?</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="bp">CGAffineTransform</span><span class="p">(</span><span class="nl">scaleX</span><span class="p">:</span> <span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Show time:</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">button</span><span class="p">.</span><span class="n">imageToRight</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cheers 👌💪🤘</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Paging UICollectionView]]></title>
    <link href="http://geek-is-stupid.github.io/blog/2017/02/20/how-to-paging-uicollectionview/"/>
    <updated>2017-02-20T17:41:48+07:00</updated>
    <id>http://geek-is-stupid.github.io/blog/2017/02/20/how-to-paging-uicollectionview</id>
    <content type="html"><![CDATA[<p>The layout for our UICollectionView looks like:</p>

<p><img src="https://raw.githubusercontent.com/geek-is-stupid/geek-is-stupid.github.io/master/images/post/2017-02-20-how-to-paging-uicollectionview/layout.png" title="UICollectionView Layout" alt="a brick" /></p>

<p>Create new class as subclass for: <code>UICollectionViewFlowLayout</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="k">class</span> <span class="nl">PageCollectionViewFlowLayout</span><span class="p">:</span> <span class="bp">UICollectionViewFlowLayout</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">override</span> <span class="n">public</span> <span class="k">func</span> <span class="n">targetContentOffset</span><span class="p">(</span><span class="n">forProposedContentOffset</span> <span class="nl">proposedContentOffset</span><span class="p">:</span> <span class="bp">CGPoint</span><span class="p">,</span> <span class="n">withScrollingVelocity</span> <span class="nl">velocity</span><span class="p">:</span> <span class="bp">CGPoint</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">CGPoint</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="k">let</span> <span class="nl">collectionView</span><span class="p">:</span> <span class="bp">UICollectionView</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">collectionView</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">let</span> <span class="nl">bounds</span><span class="p">:</span> <span class="bp">CGRect</span> <span class="o">=</span> <span class="n">collectionView</span><span class="p">.</span><span class="n">bounds</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">halfWidth</span> <span class="o">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="mf">0.5</span>
</span><span class='line'>            <span class="k">let</span> <span class="nl">proposedContentOffsetCenterX</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="o">=</span> <span class="n">proposedContentOffset</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">halfWidth</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="k">let</span> <span class="n">attributesForVisibleCells</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">layoutAttributesForElements</span><span class="p">(</span><span class="k">in</span><span class="o">:</span> <span class="n">bounds</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">var</span> <span class="nl">candidateAttributes</span> <span class="p">:</span> <span class="bp">UICollectionViewLayoutAttributes</span><span class="o">?</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">attributes</span> <span class="k">in</span> <span class="n">attributesForVisibleCells</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">attributes</span><span class="p">.</span><span class="n">representedElementCategory</span> <span class="o">!=</span> <span class="n">UICollectionElementCategory</span><span class="p">.</span><span class="n">cell</span> <span class="p">{</span> <span class="k">continue</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="n">attributes</span><span class="p">.</span><span class="n">center</span><span class="p">.</span><span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">attributes</span><span class="p">.</span><span class="n">center</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="p">(</span><span class="n">collectionView</span><span class="p">.</span><span class="n">contentOffset</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">halfWidth</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">velocity</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">continue</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                    <span class="k">if</span> <span class="k">let</span> <span class="n">candAttrs</span> <span class="o">=</span> <span class="n">candidateAttributes</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="n">attributes</span><span class="p">.</span><span class="n">center</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">proposedContentOffsetCenterX</span>
</span><span class='line'>                        <span class="k">let</span> <span class="n">b</span> <span class="o">=</span> <span class="n">candAttrs</span><span class="p">.</span><span class="n">center</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">proposedContentOffsetCenterX</span>
</span><span class='line'>
</span><span class='line'>                        <span class="k">if</span> <span class="n">fabsf</span><span class="p">(</span><span class="n">Float</span><span class="p">(</span><span class="n">a</span><span class="p">))</span> <span class="o">&lt;</span> <span class="n">fabsf</span><span class="p">(</span><span class="n">Float</span><span class="p">(</span><span class="n">b</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                            <span class="n">candidateAttributes</span> <span class="o">=</span> <span class="n">attributes</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">candidateAttributes</span> <span class="o">=</span> <span class="n">attributes</span>
</span><span class='line'>                        <span class="k">continue</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">proposedContentOffset</span><span class="p">.</span><span class="n">x</span> <span class="o">==</span> <span class="o">-</span><span class="p">(</span><span class="n">collectionView</span><span class="p">.</span><span class="n">contentInset</span><span class="p">.</span><span class="kr">left</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">proposedContentOffset</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="bp">CGPoint</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="n">floor</span><span class="p">(</span><span class="n">candidateAttributes</span><span class="o">!</span><span class="p">.</span><span class="n">center</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">halfWidth</span><span class="p">),</span> <span class="nl">y</span><span class="p">:</span> <span class="n">proposedContentOffset</span><span class="p">.</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">super</span><span class="p">.</span><span class="n">targetContentOffset</span><span class="p">(</span><span class="nl">forProposedContentOffset</span><span class="p">:</span> <span class="n">proposedContentOffset</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now go to Xcode to change the class for your <code>UICollectionView</code>:</p>

<p><img src="https://raw.githubusercontent.com/geek-is-stupid/geek-is-stupid.github.io/master/images/post/2017-02-20-how-to-paging-uicollectionview/FlowLayout.png" title="UICollectionView Layout" alt="a brick" /></p>

<p>And change the class for your Flow layout:</p>

<p><img src="https://raw.githubusercontent.com/geek-is-stupid/geek-is-stupid.github.io/master/images/post/2017-02-20-how-to-paging-uicollectionview/ChangeClassForFlowLayout.png" title="Change Class For Flow Layout" alt="a brick" /></p>

<p>Now show time!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Different .plist File for Different Environment in Xcode?]]></title>
    <link href="http://geek-is-stupid.github.io/blog/2016/08/17/different-plist-file-for-different-environment-in-xcode/"/>
    <updated>2016-08-17T15:53:42+07:00</updated>
    <id>http://geek-is-stupid.github.io/blog/2016/08/17/different-plist-file-for-different-environment-in-xcode</id>
    <content type="html"><![CDATA[<p>If you have question like this title of this post, so you are my audience</p>

<p>OK now if I have 2 <code>.plist</code> files:</p>

<ol>
<li>SERVICE-ACCOUNT-DEBUG.plist</li>
<li>SERVICE-ACCOUNT-RELEASE.plist</li>
</ol>


<p>When app runs, depend on current environment we will rename one of them to <code>SERVICE-ACCOUNT.plist</code>:</p>

<p>If app in DEBUG mode we will rename <code>SERVICE-ACCOUNT-DEBUG.plist</code> to <code>SERVICE-ACCOUNT.plist</code></p>

<p>If app in RELEASE mode we will rename <code>SERVICE-ACCOUNT-RELEASE.plist</code> to <code>SERVICE-ACCOUNT.plist</code></p>

<p>Let go to your <code>Build Phares</code> and create new Run script:</p>

<p><img src="https://raw.githubusercontent.com/geek-is-stupid/geek-is-stupid.github.io/master/images/post/2016-08-17-different-plist-file-for-different-environment-in-xcode/1.png" title="New script" alt="a brick" /></p>

<p>Add this script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">if</span> <span class="p">[</span> <span class="s">&quot;${CONFIGURATION}&quot;</span> <span class="o">==</span> <span class="s">&quot;Release&quot;</span> <span class="p">];</span> <span class="n">then</span>
</span><span class='line'><span class="n">cp</span> <span class="o">-</span><span class="n">r</span> <span class="s">&quot;${PROJECT_DIR}/PATH-TO-FILE/SERVICE-ACCOUNT-RELEASE.plist&quot;</span> <span class="s">&quot;${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.app/SERVICE-ACCOUNT.plist&quot;</span>
</span><span class='line'><span class="n">echo</span> <span class="s">&quot;Production plist copied&quot;</span>
</span><span class='line'><span class="n">elif</span> <span class="p">[</span> <span class="s">&quot;${CONFIGURATION}&quot;</span> <span class="o">==</span> <span class="s">&quot;Debug&quot;</span> <span class="p">];</span> <span class="n">then</span>
</span><span class='line'><span class="n">cp</span> <span class="o">-</span><span class="n">r</span> <span class="s">&quot;${PROJECT_DIR}/PATH-TO-FILE/SERVICE-ACCOUNT-DEBUG.plist&quot;</span> <span class="s">&quot;${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.app/SERVICE-ACCOUNT.plist&quot;</span>
</span><span class='line'><span class="n">echo</span> <span class="s">&quot;Debug plist copied&quot;</span>
</span><span class='line'><span class="n">fi</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Show Warning When Add //TODO: //FIXME: //ERRO: In Xcode?]]></title>
    <link href="http://geek-is-stupid.github.io/blog/2016/08/17/how-to-show-warning-when-add-slash-slash-todo-and-slash-slash-fixme-in-xcode/"/>
    <updated>2016-08-17T15:36:02+07:00</updated>
    <id>http://geek-is-stupid.github.io/blog/2016/08/17/how-to-show-warning-when-add-slash-slash-todo-and-slash-slash-fixme-in-xcode</id>
    <content type="html"><![CDATA[<p>If you make a note in xcode, and you dont want to miss that, there are some solution for that, I will show you one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">//TODO: Let read this blog in 15 mins</span>
</span><span class='line'><span class="c1">//FIX: I need you fix me man :)</span>
</span><span class='line'><span class="c1">//ERROR: Noooooooooo, get out of here the error</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK now how to make xcode understand to show your wanrning and error:</p>

<p>Go to <code>Build Phases</code> and create new Run script:</p>

<p><img src="https://raw.githubusercontent.com/geek-is-stupid/geek-is-stupid.github.io/master/images/post/2016-08-17-how-to-show-warning-when-add-slash-slash-todo-and-slash-slash-fixme-in-xcode/1.png" title="New script" alt="a brick" /></p>

<p>Add this script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">TAGS</span><span class="o">=</span><span class="s">&quot;TODO:|FIXME:&quot;</span>
</span><span class='line'><span class="n">ERRORTAG</span><span class="o">=</span><span class="s">&quot;ERROR:&quot;</span>
</span><span class='line'><span class="n">find</span> <span class="s">&quot;${SRCROOT}&quot;</span> <span class="err">\</span><span class="p">(</span> <span class="o">-</span><span class="n">name</span> <span class="s">&quot;*.h&quot;</span> <span class="o">-</span><span class="n">or</span> <span class="o">-</span><span class="n">name</span> <span class="s">&quot;*.m&quot;</span> <span class="o">-</span><span class="n">or</span> <span class="o">-</span><span class="n">name</span> <span class="s">&quot;*.swift&quot;</span> <span class="err">\</span><span class="p">)</span> <span class="o">-</span><span class="n">print0</span> <span class="o">|</span> <span class="n">xargs</span> <span class="o">-</span><span class="mi">0</span> <span class="n">egrep</span> <span class="o">--</span><span class="n">with</span><span class="o">-</span><span class="n">filename</span> <span class="o">--</span><span class="n">line</span><span class="o">-</span><span class="n">number</span> <span class="o">--</span><span class="n">only</span><span class="o">-</span><span class="n">matching</span> <span class="s">&quot;($TAGS).*\$|($ERRORTAG).*\$&quot;</span> <span class="o">|</span> <span class="n">perl</span> <span class="o">-</span><span class="n">p</span> <span class="o">-</span><span class="n">e</span> <span class="s">&quot;s/($TAGS)/ warning: \$1/&quot;</span> <span class="o">|</span> <span class="n">perl</span> <span class="o">-</span><span class="n">p</span> <span class="o">-</span><span class="n">e</span> <span class="s">&quot;s/($ERRORTAG)/ error: \$1/&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Swift Compiler Flags in CocoaPods]]></title>
    <link href="http://geek-is-stupid.github.io/blog/2016/08/17/setting-swift-compiler-flags-in-cocoapods/"/>
    <updated>2016-08-17T15:15:53+07:00</updated>
    <id>http://geek-is-stupid.github.io/blog/2016/08/17/setting-swift-compiler-flags-in-cocoapods</id>
    <content type="html"><![CDATA[<p>Someday your boss ask you to have staging server and production server to make data be pure, so you will find out this code for your api:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="k">var</span> <span class="nl">host</span><span class="p">:</span> <span class="bp">NSURL</span> <span class="p">{</span>
</span><span class='line'>    <span class="cp">#if DEBUG</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">NSURL</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="s">&quot;https://www.google.com.vn&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="cp">#else</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">NSURL</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="s">&quot;http://geek-is-stupid.github.io&quot;</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you go to <code>Build Settings</code> and set the <code>DEBUG</code> symbol in <code>Swift Compiler - Custom Flags</code> section for the <code>Other Swift Flags</code> key via a <code>-D DEBUG</code> entry. See the following screenshot for an example:</p>

<p><img src="https://raw.githubusercontent.com/geek-is-stupid/geek-is-stupid.github.io/master/images/post/2016-08-17-setting-swift-compiler-flags-in-cocoapods/1.png" title="Setup -D DEBUG for Other Swift Flags" alt="a brick" /></p>

<p>That works, hummm but what happen if I move the <code>host</code> to a library and I use CocoaPods to manages dependencies, it won&rsquo;t work any more.</p>

<p>So the way to let it jump :)</p>

<p>Open your Podfile and add this script to the bottom:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">post_install</span> <span class="k">do</span> <span class="o">|</span><span class="n">installer</span><span class="o">|</span>
</span><span class='line'>    <span class="n">installer</span><span class="p">.</span><span class="n">pods_project</span><span class="p">.</span><span class="n">build_configurations</span><span class="p">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">config</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="err">&#39;</span><span class="n">Debug</span><span class="err">&#39;</span>
</span><span class='line'>            <span class="n">config</span><span class="p">.</span><span class="n">build_settings</span><span class="p">[</span><span class="err">&#39;</span><span class="n">OTHER_SWIFT_FLAGS</span><span class="err">&#39;</span><span class="p">]</span> <span class="o">||=</span> <span class="p">[</span><span class="err">&#39;$</span><span class="p">(</span><span class="n">inherited</span><span class="p">)</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">-</span><span class="n">D</span> <span class="n">DEBUG</span><span class="err">&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">elsif</span> <span class="n">config</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="err">&#39;</span><span class="n">Release</span><span class="err">&#39;</span>
</span><span class='line'>            <span class="n">config</span><span class="p">.</span><span class="n">build_settings</span><span class="p">[</span><span class="err">&#39;</span><span class="n">OTHER_SWIFT_FLAGS</span><span class="err">&#39;</span><span class="p">]</span> <span class="o">||=</span> <span class="p">[</span><span class="err">&#39;$</span><span class="p">(</span><span class="n">inherited</span><span class="p">)</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">-</span><span class="n">D</span> <span class="n">RELEASE</span><span class="err">&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">end</span>
</span><span class='line'>    <span class="n">end</span>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Set Placeholder Text Color for UITextField?]]></title>
    <link href="http://geek-is-stupid.github.io/blog/2016/08/16/how-to-set-placeholder-text-color-for-uitextfield/"/>
    <updated>2016-08-16T15:39:21+07:00</updated>
    <id>http://geek-is-stupid.github.io/blog/2016/08/16/how-to-set-placeholder-text-color-for-uitextfield</id>
    <content type="html"><![CDATA[<h4>Worked on UI is interesting part of iOS development</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="bp">UITextField</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">setPlaceholderColor</span><span class="p">(</span><span class="nl">color</span><span class="p">:</span> <span class="bp">UIColor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="k">let</span> <span class="n">placeholder</span> <span class="o">=</span> <span class="n">placeholder</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">attributedPlaceholder</span> <span class="o">=</span> <span class="bp">NSAttributedString</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="n">placeholder</span><span class="p">,</span> <span class="nl">attributes</span><span class="p">:</span> <span class="p">[</span><span class="nl">NSForegroundColorAttributeName</span><span class="p">:</span> <span class="n">color</span><span class="p">])</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Way to use:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">textField</span> <span class="o">=</span> <span class="bp">UITextField</span><span class="p">()</span>
</span><span class='line'><span class="n">textField</span><span class="p">.</span><span class="n">setPlaceholderColor</span><span class="p">(.</span><span class="n">redColor</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Let&rsquo;s try, it&rsquo;s delicious</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Go to iOS Settings From Your App?]]></title>
    <link href="http://geek-is-stupid.github.io/blog/2016/08/16/how-to-go-to-ios-settings-from-your-app/"/>
    <updated>2016-08-16T15:26:31+07:00</updated>
    <id>http://geek-is-stupid.github.io/blog/2016/08/16/how-to-go-to-ios-settings-from-your-app</id>
    <content type="html"><![CDATA[<h3>OK let&rsquo;s do</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="bp">UIApplication</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">class</span> <span class="k">func</span> <span class="n">openSettings</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="bp">NSURL</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="n">UIApplicationOpenSettingsURLString</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">UIApplication</span><span class="p">.</span><span class="n">sharedApplication</span><span class="p">().</span><span class="n">openURL</span><span class="p">(</span><span class="n">url</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Show time:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="bp">UIApplication</span><span class="p">.</span><span class="n">openSettings</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope you like it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Set Background Color for Status Bar?]]></title>
    <link href="http://geek-is-stupid.github.io/blog/2016/08/16/how-to-set-background-color-for-status-bar/"/>
    <updated>2016-08-16T15:16:54+07:00</updated>
    <id>http://geek-is-stupid.github.io/blog/2016/08/16/how-to-set-background-color-for-status-bar</id>
    <content type="html"><![CDATA[<h4>There are many way to do, I show a trick, don&rsquo;t follow me :D</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="bp">UIApplication</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">class</span> <span class="k">func</span> <span class="n">setStatusBarBackgroundColor</span><span class="p">(</span><span class="nl">color</span><span class="p">:</span> <span class="bp">UIColor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">guard</span> <span class="k">let</span> <span class="n">statusBar</span> <span class="o">=</span> <span class="bp">UIApplication</span><span class="p">.</span><span class="n">sharedApplication</span><span class="p">().</span><span class="n">valueForKey</span><span class="p">(</span><span class="s">&quot;statusBarWindow&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">valueForKey</span><span class="p">(</span><span class="s">&quot;statusBar&quot;</span><span class="p">)</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">UIView</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">statusBar</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="n">color</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Do and see the change:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="bp">UIApplication</span><span class="p">.</span><span class="n">setStatusBarBackgroundColor</span><span class="p">(.</span><span class="n">grayColor</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
